<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xblydxj</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xblydxj.xyz/"/>
  <updated>2017-08-10T08:59:59.000Z</updated>
  <id>https://xblydxj.xyz/</id>
  
  <author>
    <name>Xblydxj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVVM的实现以及与MVP的对比</title>
    <link href="https://xblydxj.xyz/2017/07/18/MVVM%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E4%B8%8EMVP%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>https://xblydxj.xyz/2017/07/18/MVVM的实现以及与MVP的对比/</id>
    <published>2017-07-18T00:03:00.000Z</published>
    <updated>2017-08-10T08:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在接触MVP之后也了解了MVVM的部分，当时DataBinding还未成熟，也就没有细致的看过，而现在DateBinding也已经很完善，相比较于MVP我更加推荐使用MVVM进行开发，而其也需要搭配一些其他的几个框架，首先就是他的本质框架，DataBinding，而还有一个也非常合适于MVVM和MVP的框架，Dagger2。<br>关于Dagger2的部分之后再单独进行介绍。</p>
<h3 id="MVVM架构思想"><a href="#MVVM架构思想" class="headerlink" title="MVVM架构思想"></a>MVVM架构思想</h3><ul>
<li>M(Model)：控制着架构上的逻辑等的实体模型。</li>
<li>VM(ViewModel)：与mvp不同的是ViewModel也是中间桥梁，但他并不需要契约类进行连接，而是使用DataBinding着一框架进行单向或双向的绑定。</li>
<li>V(View)：代表着Activity与xml的ui界面内容。</li>
</ul>
<p>MVVM的关键思想还是在于数据绑定，原本的mvc或是mvp每次的ui更新，其上的数据也需要随着变化都是从代码中跟随逻辑进行变化，而使用MVVM将使控件与其需要的内容进行绑定，每一次的数据更新将自动进行ui的更新。</p>
<p>依旧还是需要动手实践一下：</p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>MVVM框架由谷歌推荐，所以也拥有它特别的位置，从databinding开启的位置就可以看出来：<br>在gradle文件中添加下面几行代码即可开启databinding：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dataBinding &#123;</div><div class="line">   enabled true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单的开启方式。</p>
<h4 id="xml界面"><a href="#xml界面" class="headerlink" title="xml界面"></a>xml界面</h4><p>简单写一个界面作为示范，选用一个每日一文的接口：<a href="https://interface.meiriyiwen.com/article/today" target="_blank" rel="external">https://interface.meiriyiwen.com/article/today</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.xblydxj.mvvmdemo.Article.DataBean"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"article"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"DataBean"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">tools:context</span>=<span class="string">"com.xblydxj.mvvmdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;@string/time + article.date.curr&#125;"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;@string/author + article.author&#125;"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;@string/title + article.title&#125;"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;@string/digest + article.digest&#125;"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;@string/content + article.content&#125;"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>xml的变化非常明显，首先最外层的包裹已经变化了，根节点为<layout>标签，而上方使用<data>标签将本页面所需要的内容提供出来，下方即为正常的ui界面。</data></layout></p>
<h4 id="bean的提供"><a href="#bean的提供" class="headerlink" title="bean的提供"></a>bean的提供</h4><p>根据<a href="https://interface.meiriyiwen.com/article/today" target="_blank" rel="external">每日一文</a>的json提供，我们先写出他对应的bean类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> DataBean data;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBean</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> DateBean date;</div><div class="line">        <span class="keyword">public</span> String author;</div><div class="line">        <span class="keyword">public</span> String title;</div><div class="line">        <span class="keyword">public</span> String digest;</div><div class="line">        <span class="keyword">public</span> String content;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> wc;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DateBean</span> </span>&#123;</div><div class="line">            <span class="keyword">public</span> String curr;</div><div class="line">            <span class="keyword">public</span> String prev;</div><div class="line">            <span class="keyword">public</span> String next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>去除了一些set，get方法，改为public，以便调用。<br>转向xml部分：<br>在上部分的data标签中，我们需要提供变量，以供显示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.xblydxj.mvvmdemo.Article.DataBean"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">       <span class="attr">name</span>=<span class="string">"article"</span></div><div class="line">       <span class="attr">type</span>=<span class="string">"DataBean"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在其中使用import标签注入，在定义一个变量以供调用。<br>而下方每一个用于显示内容的textview，其text的显示属性将上方提供的数据进行绑定：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text="@&#123;article.content&#125;"</div></pre></td></tr></table></figure>
<p>用于显示bean中content内容的TextView也将上方data提供的article中的content进行绑定，格式也真是这样。</p>
<h4 id="Activty部分"><a href="#Activty部分" class="headerlink" title="Activty部分"></a>Activty部分</h4><p>这一部分完成双向绑定的工作，但和mvp不同的是，由于大部分ui是由数据控制进行改变的，所以mvvm中的activity已经节省了许多工作，所以这里的activity也包含着model层的工作，依旧是集中的。</p>
<p>其实这一点是值得吐槽的：MVP架构整体的解耦非常彻底，但是用于工程时很明显的一个弊端就是，类文件增加翻倍，而mvvm并没有这样的问题，他更自由。</p>
<p>这里为了方便，我再gradle中添加了rxjava与retrofit的依赖用于网络请求部分的编写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.okhttp3:okhttp:3.4.1&apos;</div><div class="line">compile &apos;com.squareup.okio:okio:1.9.0&apos;</div><div class="line">compile &apos;io.reactivex:rxandroid:1.2.1&apos;</div><div class="line">compile &apos;io.reactivex:rxjava:1.2.1&apos;</div><div class="line">compile &apos;com.artemzin.rxjava:proguard-rules:1.2.1.0&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.0.0-beta4&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.0.0-beta4&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4&apos;</div></pre></td></tr></table></figure>
<p>在进行activity书写前，我们确保了xml文件的正确性，在studio中提前进行一次编译，这时databinding将为我们生成一个文件，原xml文件名为：activity_main.xml 而对应的生成的类文件名即为：ActivityMainBinding。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ActivityMainBinding mBinding;</div><div class="line"></div><div class="line">    Api mRetrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .baseUrl(<span class="string">"https://interface.meiriyiwen.com/"</span>)</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .client(<span class="keyword">new</span> OkHttpClient.Builder().build())</div><div class="line">            .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">            .build()</div><div class="line">            .create(Api.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mBinding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</div><div class="line">        mRetrofit.getArticle()</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Article&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Article article)</span> </span>&#123;</div><div class="line">                        mBinding.setArticle(article.data);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，非常的精简，除了绑定部分的两行代码以外，剩余部分都是网络请求的一些初始化，一些mvc和mvp中需要做的关于ui与数据的显示已经全部由databinding帮我们做了。</p>
<p>在activity中首先我们在onCreate里去除了原有的setContentView的这行代码，而改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ActivityMainBinding mBinding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</div></pre></td></tr></table></figure>
<p>抽取为成员变量以便调用。这一步即是替代了原有的setContentView。</p>
<p>之后便是直接开始retrofit的网络请求部分，先进行他的api定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"article/today"</span>)</div><div class="line">    <span class="function">Observable&lt;Article&gt; <span class="title">getArticle</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后续步骤就在activity中进行，成员变量的初始化，然后由retrofit进行请求，之后再在订阅成功后的next中将databinding需要的数据提供给他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBinding.setArticle(article.data);</div></pre></td></tr></table></figure>
<p>这样即完成了一个简单的MVVM的构建。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一个比较关键的使用，是关于recyclerview或是listview在这里的使用。databinding的recyclerview部分有些麻烦，但思想依旧是相同的，具体可以看这篇博客：<a href="https://github.com/LyndonChin/MasteringAndroidDataBinding" target="_blank" rel="external">精通DataBinding</a></p>
<p>但说回来，再某些时候，如果觉得使用databinding不熟练或是不方便，可以立马就转回原有的mvc写法，只是数据的部分再次归还给了activity，但不影响我们项目整体的编写。</p>
<p>如今databinding已经成熟，从项目的角度讲，相比较于MVP我更加推荐MVVM的写法。ui与逻辑的分离更加彻底。并且没有更多的文件增加。熟练掌握databinding之后会很舒服。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在接触MVP之后也了解了MVVM的部分，当时DataBinding还未成熟，也就没有细致的看过，而现在DateBinding也已经很完善，相比较于MVP我更加推荐使用MVVM进行开发，而其也需要搭配一些其他的几个框架，首先就是他的本质框架，DataBinding，而还有一个
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Android" scheme="https://xblydxj.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>迟到的MVP</title>
    <link href="https://xblydxj.xyz/2017/07/16/%E8%BF%9F%E5%88%B0%E7%9A%84MVP/"/>
    <id>https://xblydxj.xyz/2017/07/16/迟到的MVP/</id>
    <published>2017-07-16T04:02:00.000Z</published>
    <updated>2017-07-16T04:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迟到的MVP"><a href="#迟到的MVP" class="headerlink" title="迟到的MVP"></a>迟到的MVP</h3><p>去年第一次使用mvp做了个<a href="https://github.com/xblydxj/Gank" target="_blank" rel="external">小应用</a>，也是<a href="gank.io">干货集中营</a>的安卓客户端，Material的风格，MVP的架构，也使用了rxjava和retrofit，不过这期间没有去做过关于mvp的这样的总结。</p>
<h3 id="一些基本的对比"><a href="#一些基本的对比" class="headerlink" title="一些基本的对比"></a>一些基本的对比</h3><p>android上最为让我们熟知的三个框架就是MVC，MVP，MVVM。当然也有一些其他的框架和思想。初学时接触的基本就是MVC了，而在之后也出现了MVP和MVVM，他们的目的最主要的都是为了<strong>解耦</strong>：</p>
<ol>
<li>MVC：由model层进行数据业务的处理，View层进行ui的展示，中间使用Controler作为两者交互的桥梁。</li>
<li>MVP：依旧是model层的数据业务，Activity变为纯粹的View的ui展示，中间由Presenter进行逻辑处理与沟通。</li>
<li>MVVM：与MVP类似，但其中间交互作用的从Presenter变为了ViewModel，并且ViewModel与View之间是使用DataBinding进行绑定的。</li>
</ol>
<h3 id="MVP实例"><a href="#MVP实例" class="headerlink" title="MVP实例"></a>MVP实例</h3><p>上面都是一些概念性的东西，当然还是需要动手练习一下才能真正理解。<br>MVP对于一个Activity或是Fragment都被解耦成3个部分，原本MVC集中在一个activity的繁杂代码，由Presenter，Contract，Activity3个部分组成，Presenter进行当前页面上逻辑的处理，Activity进行当前页面上ui的处理，Contract作为一个契约类对两方沟通构建方法。<br>3方分工明确，这样的代码易于维护，但是类文件数量确实也是增加了不少。</p>
<h4 id="创建一个demo"><a href="#创建一个demo" class="headerlink" title="创建一个demo"></a>创建一个demo</h4><p>在包中创建一个<code>BasePresenter</code>接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">unSubscribe</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以及<code>BaseView</code>接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于他们的作用，下面进行叙述。</p>
<h4 id="简单写一个登录页面："><a href="#简单写一个登录页面：" class="headerlink" title="简单写一个登录页面："></a>简单写一个登录页面：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">   <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">   <span class="attr">tools:context</span>=<span class="string">"com.xblydxj.mvpdemo.LoginActivity"</span>&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/username"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></div><div class="line">       <span class="attr">android:hint</span>=<span class="string">"@string/username"</span>/&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/password"</span></div><div class="line">       <span class="attr">android:inputType</span>=<span class="string">"textPassword"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></div><div class="line">       <span class="attr">android:hint</span>=<span class="string">"@string/password"</span>/&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/login"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></div><div class="line">       <span class="attr">android:text</span>=<span class="string">"@string/login"</span>/&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/register"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"50dp"</span></div><div class="line">       <span class="attr">android:text</span>=<span class="string">"@string/register"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="契约类的实现"><a href="#契约类的实现" class="headerlink" title="契约类的实现"></a>契约类的实现</h4><p>首先确定几个逻辑和事件：</p>
<ul>
<li>事件1：点击登录时产生逻辑，需要判断账号与密码是否输入，然后做出相应ui变动。</li>
<li>事件2：点击注册页面产生跳转逻辑。</li>
</ul>
<p>简单的分割就是，关于ui的变动：</p>
<ul>
<li>登录成功提示与页面跳转（跳转省略）</li>
<li>登录失败的提示</li>
<li>点击注册的提示与跳转（跳转省略）</li>
</ul>
<p>而关于逻辑的部分有：</p>
<ul>
<li>账号输入框内容的判断</li>
<li>密码输入框内容的判断</li>
<li>跳转逻辑（省略）</li>
</ul>
<p>这些部分的定义便是属于Contract的功能，逻辑的内部实现属于Presenter，ui的内部实现属于View层，分工明确，解耦，并条例清晰，易于寻找。</p>
<p>LoginContract类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginContract</span> </span>&#123;</div><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt;</span>&#123;</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">loginSucceed</span><span class="params">(String succeed)</span></span>;</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">(String failed)</span></span>;</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String register)</span></span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">valid</span><span class="params">(String username, String password)</span></span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="View部分的实现"><a href="#View部分的实现" class="headerlink" title="View部分的实现"></a>View部分的实现</h4><p>view部分即是activity的实现，首先需要继承Contract类中的View接口实现其关于ui的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">View</span> </span>&#123;</div><div class="line">    <span class="meta">@Bind</span>(R.id.username)</div><div class="line">    EditText username;</div><div class="line">    <span class="meta">@Bind</span>(R.id.password)</div><div class="line">    EditText password;</div><div class="line">    <span class="keyword">private</span> LoginContract.Presenter mPresenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        mPresenter = <span class="keyword">new</span> LoginPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(LoginContract.Presenter presenter)</span> </span>&#123;</div><div class="line">        mPresenter = presenter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        mPresenter.subscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        mPresenter.unSubscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSucceed</span><span class="params">(String succeed)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, succeed, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="comment">//跳转省略</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">(String failed)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, failed, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String register)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, register, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="comment">//跳转省略</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(&#123;R.id.login, R.id.register&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"ddd"</span>, <span class="string">"view"</span>);</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.login:</div><div class="line">                Log.d(<span class="string">"ddd"</span>, <span class="string">"view2"</span>);</div><div class="line">                mPresenter.valid(username.getText().toString().trim(), password.getText().toString().trim());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.register:</div><div class="line">                Log.d(<span class="string">"ddd"</span>, <span class="string">"view3"</span>);</div><div class="line">                mPresenter.toRegister();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现契约中View接口的几个方法，为了方便使用了butterknife，首先是创建其对应的Presenter对象，使用<code>setPresenter</code>方法双向订阅，完成两方的链接，使其能够互相调用，而最初的BasePresenter中有两个订阅与解除订阅的方法，与activity生命周期进行绑定，在适当时候订阅，适当时候解除订阅清理内存。<br>页面上有2个按钮，在view中进行点击事件的实现，期间对应事件调用presenter中对应的逻辑方法，将逻辑的部分完全抛给presenter进行实现。</p>
<h4 id="Presenter部分的实现"><a href="#Presenter部分的实现" class="headerlink" title="Presenter部分的实现"></a>Presenter部分的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> <span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">Presenter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LoginContract.View loginView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginPresenter</span><span class="params">(LoginContract.View view)</span> </span>&#123;</div><div class="line">        loginView = view;</div><div class="line">        loginView.setPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//订阅</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unSubscribe</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//解除订阅</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valid</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(username)) &#123;</div><div class="line">            loginView.loginFailed(<span class="string">"账号不能为空"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(password)) &#123;</div><div class="line">            loginView.loginFailed(<span class="string">"密码不能为空"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        loginView.loginSucceed(<span class="string">"登录成功!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">        loginView.register(<span class="string">"跳转至注册~"</span>);</div><div class="line">        <span class="comment">//跳转省略</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相对应的presenter中首先是其构造方法，将对应的view传入以便presenter中逻辑完成后调用对应的ui变动的方法。<br>依旧是先进行实现契约类中属于presenter的部分，然后实现其两个逻辑方法，以及BasePresenter中的两个订阅与解除订阅的方法，这两个方法，订阅中将一些初始化的方法在其内部实现，解除订阅中进行清理内存，清理一些需要清理的动作。</p>
<hr>
<p>简单的MVP的实例就是以上的步骤，其中一些复杂页面也是由此进行引申，而首先MVP在coding时几个要点记住，写的也是会很快的：</p>
<ul>
<li><strong>ui部分与逻辑部分的完全分离</strong>。</li>
<li><strong>中间连接契约类的定义，其中进行最先需要的方法的定义，实现交由view与presenter来做。是第一个需要写的类</strong></li>
<li><strong>双向绑定的过程，presenter中先进行构造方法的定义，再由view层创建其对象进行调用，而presenter中也能够传入一个view的对象进行调用。</strong></li>
<li><strong>剩下的就是清晰的逻辑实现</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;迟到的MVP&quot;&gt;&lt;a href=&quot;#迟到的MVP&quot; class=&quot;headerlink&quot; title=&quot;迟到的MVP&quot;&gt;&lt;/a&gt;迟到的MVP&lt;/h3&gt;&lt;p&gt;去年第一次使用mvp做了个&lt;a href=&quot;https://github.com/xblydxj/Gank&quot;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Android" scheme="https://xblydxj.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>上海的落幕之行，崇明岛</title>
    <link href="https://xblydxj.xyz/2017/07/14/%E4%B8%8A%E6%B5%B7%E7%9A%84%E8%90%BD%E5%B9%95%E4%B9%8B%E8%A1%8C%EF%BC%8C%E5%B4%87%E6%98%8E%E5%B2%9B/"/>
    <id>https://xblydxj.xyz/2017/07/14/上海的落幕之行，崇明岛/</id>
    <published>2017-07-14T02:11:00.000Z</published>
    <updated>2017-08-08T10:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="崇明岛"><a href="#崇明岛" class="headerlink" title="崇明岛"></a>崇明岛</h3><p>   当时的温度高达36摄氏度，很后悔，晚了一礼拜，前一个礼拜还有春意，现在就是大夏天了，回来之后皮肤也发红了。<br>   整天待在家里，就知道宅，出去玩了一趟发现确实还是宅好。<br>   计划了好几个礼拜，作为上海一个较为出名的自然景观，呆着一些憧憬前往的，然鹅。。<br>   提前好几天准备了帐篷睡袋和单反，第二天8点出门，出门时我的心情约莫是这样的：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-3.png" alt="笑容渐渐出现"></p>
<p>而且因为想到了这样的大太阳，我也准备了一顶帽子，因为自己的机智感到高兴。<br>    计划中大概的路线是这样的：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-%E8%B7%AF%E7%BA%BF.png" alt="路线"></p>
<p>只是去锦绣大道的的方式改成电单车 <del>绿色那种共享电单车，轻松</del> ，挂上行李，背着包，戴着帽子，就出发了，经过了一个小时到达了申崇二线的公交站台，然鹅此时已经10点多了，并且由于包有点重，肩周炎又犯了，所以此时我的心情变成这样：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-4.png" alt="笑容渐渐消失"></p>
<p>一直讨厌坐公交车的我，买票时就问售票员去崇明岛大概需要多长时间，售票员手里动作依旧，快速的说了一句“半小时”，我的心情瞬间又变成了：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-3.png" alt="笑容渐渐出现">这样</p>
<p>毕竟原先了解的是需要坐一个多小时的公交才能到，他需要跨过那么长的跨海大桥。<br>    坐上了公交车，戴上耳机，难得休息了一下。慢慢出了市区，进了隧道，出了隧道，看见了那座桥：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-%E6%A1%A5.jpeg" alt="长江大桥"></p>
<p>还是不错的。<br>    只是在车上，拍照不方便，而天真的我也以为这才是刚刚开始，而且后面也有机会再拍。<br>    约莫40分钟后就在陈家镇下了车，而此时也已经11点了，拒绝了那些私家车的招揽，背着包和帐篷，挂着单反就出发了，路线大概是这样的：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-all.png" alt="路线"></p>
<p>其实后悔来这地方的有一个重大因素，就是距离太远了，这地方就适合自驾游，而且那么热，在走过了一段路之后我就找了个当地的私家车，200大洋就没了，经过司机的介绍，路线大致不变，中间穿插一些小道。<br>上了车，司机看我带着大包小包就知道我要露营，但是他给了我一个晴天霹雳，“崇明岛不在露营节不能露营”，听闻这个消息，我的心情是这样的：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-5.png" alt="笑容完全消失"></p>
<p>然后他又说，“不过我可以带你去找一个他们检查不到的地方 <del>不是露营节，晚间有工作人员在主要地区走动巡逻，还是为了安全嘛</del> ，我仿佛又闻到了阴谋的味道。<br>    是的，价格从200涨到了300，我犹豫了一会，又推脱了，看看再说，到时候自己找也成。<br>    沿着东滩打到往下，转向东滩湿地公园，中间我就没见过一个游客，此时我的心已经下沉了：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-2.png" alt="开始失去意识"></p>
<p>到了东滩大道，在一个露营地附近停了车：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0009%20%281%29.JPG" alt="露营地"></p>
<p>背后的风力发电机：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0012%20%281%29.JPG" alt="风力发电机"></p>
<p>池塘里正在开放的荷花：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0014%20%281%29.JPG" alt="荷花"></p>
<p>这荷花给了我一些惊喜，还是不错的<del>没见过黄色的荷花</del>，重新绽放笑容，开始拍了</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-3.png" alt="笑容渐渐出现"></p>
<p>沿着东旺路直下，沿途路过了一个游客聚集地，但是还是没人，非常的痛心，大夏天的果然只有我这么蠢：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0031%20%281%29.JPG" alt="聚集地"></p>
<p>而转过方向另一边，东滩湿地就到了，而原以为就一片类似草原带点水槽的湿地给了另一种惊喜，上面有牛：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0034%20%281%29.JPG" alt="牛1"></p>
<p>经过司机介绍，这里当初是开发时耕田需要用的黄牛，一眼望过去有500多头，然鹅，如今的崇明岛也不需要这样的耕地，主打开发旅游业，但是黄牛们作出了重要贡献使得政府包下了养殖他们的任务，这群黄牛还是挺幸福的，在湿地吃吃草，泡泡水，地方这么大，还没有人打扰，也不会被人吃，正常的生老病死。<del>我羡慕了？</del></p>
<p>抓拍到了一张白鹭上天的：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0032%20%281%29.JPG" alt="牛2"></p>
<p>到了湿地，原本想要进去再看看的，但是需要另外的门票<del>舍不得钱了</del>就没进去了，之后跟着司机上了一条野路，向着下方去，想要去瀛东村下方的海边找一个能够露营的点，这是之前我说想要看第二天的日出，司机介绍的。</p>
<p>天啊，你那么…蓝，海啊，你那么 emmmmm …黄</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0044%20%281%29.JPG" alt="海1"></p>
<p>到了这里，我已经失望了，虽然这确实应该是这样的，就是确实很失望，黄黄的海，看日出？有点影响，况且，按照司机的说法，想要露营看日出，位置就在这片堤坝上方，路边找一片小空地，看了一眼，地上还有些垃圾没有处理，关键是我左右看了看，没有路灯，海边也没有灯，而难得碰见了其他游客，两个妹子：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0057%20%281%29.JPG" alt="妹子和海"></p>
<p>她们肯定是不会露营了，这很难受。</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-6.png" alt="彻底失去意识"></p>
<p>是的，我放弃了露营的打算 <del>露营还得给司机100，拒绝</del> 背着行李，准备结束之旅，去往最后一站，瀛东村，根据司机的介绍，这个村子即是旅游的开发，也是这里一些土豪们的别墅群居住地。</p>
<p>村边的小路：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0068%20%281%29.JPG" alt="路"></p>
<p>村里的桥：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0072%20%281%29.JPG" alt="桥"></p>
<p>村里的小桥：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0075%20%281%29.JPG" alt="小桥"></p>
<p>村外也是一小片开发了的点：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/DSC_0079%20%281%29.JPG" alt="小草坪"></p>
<p>这个点之后已经到了下午4点，而在4点半也有最后一班回到上海的船，我决定坐这班船回去，说出来你可能不信，虽然我是海边的人，却不会游泳，也没有坐过船。所以还是有体验一把的必要的。船费比车费还便宜都是十几块，不过船并不透风，窗户都是蓝色的。扛着打包小包的我不想拿出相机了。</p>
<p>手机拍了一张：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/cmd-%E8%88%B9.jpeg" alt="船"></p>
<p>结束了这个旅程，也代表着此次上海之行的落幕。。。新的生活即将到来，回家休息一段时间先。</p>
<h3 id="很应景的音乐"><a href="#很应景的音乐" class="headerlink" title="很应景的音乐"></a>很应景的音乐</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="440" height="86" src="//music.163.com/outchain/player?type=2&id=141233&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;崇明岛&quot;&gt;&lt;a href=&quot;#崇明岛&quot; class=&quot;headerlink&quot; title=&quot;崇明岛&quot;&gt;&lt;/a&gt;崇明岛&lt;/h3&gt;&lt;p&gt;   当时的温度高达36摄氏度，很后悔，晚了一礼拜，前一个礼拜还有春意，现在就是大夏天了，回来之后皮肤也发红了。&lt;br&gt;   整天待
    
    </summary>
    
      <category term="生活" scheme="https://xblydxj.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="live" scheme="https://xblydxj.xyz/tags/live/"/>
    
      <category term="旅游" scheme="https://xblydxj.xyz/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>魔兽世界插件整合</title>
    <link href="https://xblydxj.xyz/2017/07/05/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%8F%92%E4%BB%B6%E6%95%B4%E5%90%88/"/>
    <id>https://xblydxj.xyz/2017/07/05/魔兽世界插件整合/</id>
    <published>2017-07-05T10:53:00.000Z</published>
    <updated>2017-09-19T05:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>魔兽世界洁面可定制性强，也有许多整合的界面美化插件，经过几年时间断断续续的游戏生活，插件也在持续改善增强。现在主要使用eui与WA进行搭建。<br><a id="more"></a></p>
<h3 id="魔兽世界插件整合"><a href="#魔兽世界插件整合" class="headerlink" title="魔兽世界插件整合"></a>魔兽世界插件整合</h3><p>原始界面：<br><img src="http://oni7r1rj8.bkt.clouddn.com/defaltui.jpg" alt="原始界面"><br>当前7月5号更新整合界面（使用的21:9的带鱼屏显宽）：<br><img src="http://oni7r1rj8.bkt.clouddn.com/all_hunter.jpg" alt="整合界面"></p>
<p>上图整合主要由<a href="http://www.eui.cc/" target="_blank" rel="external">Eui</a>为主要插件集合，另外包含了一些其余的美化插件，包括<a href="http://wowui.178.com/ui/101" target="_blank" rel="external">sexymap</a>，<a href="https://mods.curse.com/addons/wow/xiv-databar" target="_blank" rel="external">XIVbar</a>，<a href="https://mods.curse.com/addons/wow/weakauras-2" target="_blank" rel="external">Weak Auras</a>，以及另外的一些功能性插件。</p>
<h4 id="Weak-Auras"><a href="#Weak-Auras" class="headerlink" title="Weak Auras"></a>Weak Auras</h4><blockquote>
<p>这是一款监视插件，以各式各样自定义的样式显示美化各种信息，譬如，对应光环对应特效，对应技能对应提示等等。功能强大，可定制性极强，还可以使用lua语言做一些自定义逻辑。</p>
</blockquote>
<h5 id="演示1："><a href="#演示1：" class="headerlink" title="演示1："></a>演示1：</h5><p><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%BE%B7wa%E6%96%B0.gif" alt="演示1"><br>上图中下方圆圈即是定制的wa技能监视插件，效果还是比较酷炫的。当前职业天赋的野德，也跟随此专精进行定制，主要监控buff有，连击点数，血爪，清晰预兆，野蛮咆哮以及斜掠，割裂，痛击三dot的监视，另外还包含了能量施法条，部分技能特效等。<br><img src="http://oni7r1rj8.bkt.clouddn.com/de2.png" alt="3dot"></p>
<ol>
<li>连击点与血爪：<br> 每当获取到连击点数时圆圈左侧将动态的显示一个小圆点，最多为5个，而右侧两个点则是血爪，每次触发血爪后使用治愈，获得后两个伤害技能的快照血爪buff。</li>
<li>清晰预兆：<br> 当普通攻击触发清晰预兆后，将有一片略带透明的青色蒙版覆盖在上，效果清晰明显，使用后闪动消失。</li>
<li>野蛮咆哮：<br> 圆圈内部左上角有一个倒计时监测，是野蛮咆哮buff剩余时间的监视。</li>
<li>斜掠，割裂，痛击：<br> 这三个dot监视的对象是目标。直接以文字和进度条形式显示在圆圈上方，并且在其消失时添加了音效<del>猫叫</del>作为提醒</li>
<li>圆圈外围的橙色是作为能量条进行显示，并且在有施法时将替换为施法条。</li>
<li>除了以上对应技能的监视外，另外添加了许多技能的释放特效。</li>
</ol>
<h5 id="演示2："><a href="#演示2：" class="headerlink" title="演示2："></a>演示2：</h5><p><img src="http://oni7r1rj8.bkt.clouddn.com/dkwa%E6%96%B0.gif" alt="演示2"><br>这是邪dk的定制监视，邪dk需要监视的内容也挺多，这里也主要包含几个重点：</p>
<ol>
<li>溃烂之伤：<br> 由左侧八个动态显示的点作为溃烂至上叠层的显示，上图中使用天在打击圆圈右上角有紫色的特效，并且叠加溃烂之伤，使用暗影打击<del>下方3条爪印显示</del>消耗溃烂之伤，并且在消耗溃烂之伤时添加了底部的绿色爆炸特效，以及天启的爆炸特效消耗所有溃烂之伤。</li>
<li>恶性瘟疫：<br> 当目标有恶性瘟疫的debuff时圆圈上方显示了目标恶性瘟疫的剩余时间，以及在圆圈底部有向外辐射的绿色光线作为恶性瘟疫的特效。</li>
<li>能量：<br> 与其他专精职业设置类似，外部红色圆圈显示能量条，战斗中圆圈中部将不再显示图标，改为显示剩余能量数值。</li>
<li>诸界之灾：<br> 邪dk还有诸界之灾的监视<del>丢大便后下一发暗打加伤buff</del>，在圆圈的底部显示的紫色环绕效果作为拥有此buff的提示。<br> 其他的还有堕落十字军buff获得时的特效，枯萎凋零释放时的特效等等各个技能。</li>
</ol>
<h5 id="演示3："><a href="#演示3：" class="headerlink" title="演示3："></a>演示3：</h5><p><img src="http://oni7r1rj8.bkt.clouddn.com/dzwa%E6%96%B0.gif" alt="演示3"><br>这个是敏锐贼的部分：</p>
<ol>
<li>依旧是左侧的连击点，不过敏锐有一些天赋能够修改连击总点数，最多能够拥有10个，这使得效果的调节出现了一些问题，不过后来在设置里找到了对应天赋的特别定制的设置，wa做的还是很完善的，右侧两个蓝色的点是当前拥有的暗隐之舞的剩余层数。</li>
<li>左侧上方紫红色数值是作为安隐之刃的剩余时间监视，右侧为刺客大师护肩的暴击buff监测。</li>
<li>另外的就是一些技能的特效了，背刺的红色爆炸，袖箭风暴等。</li>
</ol>
<p>关于wa的一些使用就不叙述了：<a href="http://bbs.ngacn.cc/read.php?tid=4655386" target="_blank" rel="external">WeakAuras指南</a></p>
<blockquote>
<p><a href="https://www.bilibili.com/video/av8996867/#page=2" target="_blank" rel="external">酒仙wa定制</a>这是酒仙专精的定制。</p>
</blockquote>
<p>–</p>
<h4 id="其他新增"><a href="#其他新增" class="headerlink" title="其他新增"></a>其他新增</h4><ol>
<li><p>XIVbar：</p>
<p> <img src="http://oni7r1rj8.bkt.clouddn.com/xivbar.png" alt="xivbar"><br> 作为底部的一个信息栏显示，包含了各项信息的集合，从左侧的好友，公会角色等到中间的角色信息，专业等级，以及右侧的fps，延迟，包裹等信息的显示。调整时，也根据职业当前颜色进行配置。显示与底部补充了美感和完整性。</p>
</li>
<li><p>SexyMap:</p>
<p> <img src="http://oni7r1rj8.bkt.clouddn.com/sexymap.png" alt="sexymap"><br> 这是一个纯美化的单体插件，原本的eui自带的是纯色的方形小地图，sexymap使用一些特效进行包含，不过说起来现在也是可以使用wa来自定义这样一个一模一样的效果。</p>
</li>
<li><p>Opie：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/opie_2%20%281%29.png" alt="opie"><br>快捷键中部旋转弹出的各项，主要用来换装（猫德大佬叶子那边看见的），不过他也自带了一些其他的功能：<br><img src="http://oni7r1rj8.bkt.clouddn.com/opie%20%281%29.png" alt="opie"></p>
</li>
<li><p>FeralDotDamage：</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/fdd1%20%281%29.png" alt="fdd"><br><img src="http://oni7r1rj8.bkt.clouddn.com/fdd2%20%281%29.png" alt="fdd"><br>野德专属的一个插件了，原本我没想加进来，不过功能确实强大，主要也是为了看一下快照对于三个dot的影响，所以加进来修改了一下，保留了一个三个dot的快照和堆叠的监视以及多目标的监视，其他的就没启用了。</p>
</li>
</ol>
<p>关于eui的定制就不说了，另外如果有wa需要订做或者修改的都可以提一些意见<del>如果有人看的话</del></p>
<h4 id="附件："><a href="#附件：" class="headerlink" title="附件："></a>附件：</h4><p>dk界面1（这里使用的是普通的比例界面）：<br><img src="http://oni7r1rj8.bkt.clouddn.com/dk1.png" alt="dk"><br>dk界面2（使用21：9显示器）：<br><img src="http://oni7r1rj8.bkt.clouddn.com/all_deathknight.jpg" alt="dk2"></p>
<blockquote>
<p>这里还有团队界面的单独修改的样式，以及团队中重要技能的监视<del>角色动作条右侧</del></p>
</blockquote>
<p>骑士界面：<br><img src="http://oni7r1rj8.bkt.clouddn.com/all_parartin.jpg" alt="帕拉丁"></p>
<p>截图（夜色达拉然）：<br><img src="http://oni7r1rj8.bkt.clouddn.com/all_screenshot.jpg" alt="截图"></p>
<p>——–7.12更新——-<br>插件整合包地址：<a href="http://pan.baidu.com/s/1qYPqoWG" target="_blank" rel="external">百度网盘</a>  密码:37c1<br>——–9.19更新——-<br>添加了opie，exrt，fdd，更新了一些eui没有的插件，并把eui烦人的捞月狗广告给去掉了<br>地址：<a href="http://pan.baidu.com/s/1skJAI8P" target="_blank" rel="external">百度网盘</a>  密码:nubf</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;魔兽世界洁面可定制性强，也有许多整合的界面美化插件，经过几年时间断断续续的游戏生活，插件也在持续改善增强。现在主要使用eui与WA进行搭建。&lt;br&gt;
    
    </summary>
    
      <category term="游戏" scheme="https://xblydxj.xyz/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="wow" scheme="https://xblydxj.xyz/tags/wow/"/>
    
  </entry>
  
  <entry>
    <title>多平台分享，各平台分享不同的内容</title>
    <link href="https://xblydxj.xyz/2017/06/29/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB%EF%BC%8C%E5%90%84%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB%E4%B8%8D%E5%90%8C%E7%9A%84%E5%86%85%E5%AE%B9/"/>
    <id>https://xblydxj.xyz/2017/06/29/多平台分享，各平台分享不同的内容/</id>
    <published>2017-06-29T06:28:17.000Z</published>
    <updated>2017-06-29T07:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前做的分享都是先定义分享的内容之后再定义分享的平台，这次的需求是同一个东西分享在各个平台显示内容不同~<br><a id="more"></a></p>
<blockquote>
<p>关于正常的分享配置的过程就不赘述了，用的是友盟的分享，官方文档很详细。</p>
</blockquote>
<h4 id="原来的分享方式"><a href="#原来的分享方式" class="headerlink" title="原来的分享方式"></a>原来的分享方式</h4><blockquote>
<p>原本的分享方式是定义一个ShareAction，直接定义分享的内容及平台：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">(Activity context, String comment, String title, String image, String url)</span> </span>&#123;</div><div class="line">  <span class="keyword">new</span> ShareAction(context).withText(comment)</div><div class="line">          .withTargetUrl(url) <span class="comment">// 分享的链接</span></div><div class="line">          .withTitle(title) <span class="comment">// 分享的标题</span></div><div class="line">          .withMedia(<span class="keyword">new</span> UMImage(context, image))  <span class="comment">// 分享的图片</span></div><div class="line">          .setDisplayList(SHARE_MEDIA.WEIXIN_CIRCLE,SHARE_MEDIA.WEIXIN, SHARE_MEDIA.QQ, SHARE_MEDIA.SINA)  <span class="comment">// 分享的平台</span></div><div class="line">          .open();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的方式各个平台分享的内容都是相同的。</p>
<h4 id="使用shareBoardlistener拦截修改分享内容"><a href="#使用shareBoardlistener拦截修改分享内容" class="headerlink" title="使用shareBoardlistener拦截修改分享内容"></a>使用shareBoardlistener拦截修改分享内容</h4><p><code>ShareAction</code>中提供了一个<code>setShareboardclickCallback</code>方法，从字面意思是在点击分享的平台之后的回响，拦截点击后的响应，所以就在此做文章,由于各个平台对内容的处理方式不同，所以就传来了各项都需要的基本数据，再单独处理，所以定义了一个单独的bean类，存储基本信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareModel</span></span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> isShareCD;</div><div class="line">   <span class="keyword">private</span> String title;</div><div class="line">   <span class="keyword">private</span> String performer; <span class="comment">// 演奏家</span></div><div class="line">   <span class="keyword">private</span> String composer; <span class="comment">// 作曲家</span></div><div class="line">   <span class="keyword">private</span> String CDName; <span class="comment">// 专辑名</span></div><div class="line">   <span class="keyword">private</span> String album; <span class="comment">// 唱片名</span></div><div class="line">   <span class="keyword">private</span> Activity context;</div><div class="line">   <span class="keyword">private</span> String image;</div><div class="line">   <span class="keyword">private</span> String url;</div><div class="line">&#125;</div><div class="line">ShareModel mShareModel = <span class="keyword">new</span> ShareModel();</div><div class="line"></div><div class="line"><span class="keyword">private</span> ShareBoardlistener shareBoardlistener = <span class="keyword">new</span> ShareBoardlistener() &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onclick</span><span class="params">(SnsPlatform snsPlatform, SHARE_MEDIA share_media)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (share_media != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (share_media == SHARE_MEDIA.WEIXIN || share_media == SHARE_MEDIA.QQ) &#123;</div><div class="line">                <span class="keyword">new</span> ShareAction(mShareModel.context)</div><div class="line">                        .setPlatform(share_media)</div><div class="line">                        <span class="comment">// 微信与QQ基本配置，如withTitle等</span></div><div class="line">                        .setCallback(umShareListener)</div><div class="line">                        .share();</div><div class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(share_media == SHARE_MEDIA.WEIXIN_CIRCLE)&#123;</div><div class="line">                <span class="keyword">new</span> ShareAction(mShareModel.context)</div><div class="line">                        .setPlatform(share_media)</div><div class="line">                        <span class="comment">// 微信朋友圈的基本配置</span></div><div class="line">                        .setCallback(umShareListener)</div><div class="line">                        .share();</div><div class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(share_media == SHARE_MEDIA.SINA)&#123;</div><div class="line">                <span class="keyword">new</span> ShareAction(mShareModel.context)</div><div class="line">                        .setPlatform(share_media)</div><div class="line">                        <span class="comment">// 微博的基本配置</span></div><div class="line">                        .setCallback(umShareListener)</div><div class="line">                        .share();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>由于各个<code>share_media</code>对应的量是枚举量，不能使用<code>switch</code>语句进行<code>case</code>。所以还是用if。<br>定义了这点击监听之后，在原本的<code>ShareAction</code>中进行设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">(Activity context, <span class="keyword">boolean</span> isShareCD, String album, String CDName, String composer, String</span></span></div><div class="line">            performer, String image, String url) &#123;</div><div class="line">   mShareModel.context = context;</div><div class="line">   mShareModel.isShareCD = isShareCD;</div><div class="line">   mShareModel.album = album;</div><div class="line">   mShareModel.CDName = CDName;</div><div class="line">   mShareModel.composer = composer;</div><div class="line">   mShareModel.performer = performer;</div><div class="line">   mShareModel.image = image;</div><div class="line">   mShareModel.url = url;</div><div class="line">   <span class="keyword">new</span> ShareAction(context)</div><div class="line">           .setDisplayList(SHARE_MEDIA.WEIXIN_CIRCLE, SHARE_MEDIA.WEIXIN, SHARE_MEDIA.QQ, SHARE_MEDIA.SINA)</div><div class="line">           .setShareboardclickCallback(shareBoardlistener)</div><div class="line">           .open();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有外部传进来那个bean类的各项基本数据，然后再用于<code>shareBoardlistener</code>进行数据配置。</p>
<p>Tip：如果有一个共同的配置也需要在<code>shareBoardlistener</code>里进行配置，外部无效。</p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>微博：<img src="http://oni7r1rj8.bkt.clouddn.com/28-share-5.png" alt="微博"><br>微信：<img src="http://oni7r1rj8.bkt.clouddn.com/28-share-4.png" alt="微信"><br>朋友圈：<img src="http://oni7r1rj8.bkt.clouddn.com/28-share-3.png" alt="朋友圈"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前做的分享都是先定义分享的内容之后再定义分享的平台，这次的需求是同一个东西分享在各个平台显示内容不同~&lt;br&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Android" scheme="https://xblydxj.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结番外</title>
    <link href="https://xblydxj.xyz/2017/06/06/Python%E5%9F%BA%E7%A1%80%E7%95%AA%E5%A4%96%E6%80%BB%E7%BB%93/"/>
    <id>https://xblydxj.xyz/2017/06/06/Python基础番外总结/</id>
    <published>2017-06-06T05:36:59.000Z</published>
    <updated>2017-06-06T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些学习过程中收集的小tip~</p>
<a id="more"></a>
<h4 id="1-and和or语法相关"><a href="#1-and和or语法相关" class="headerlink" title="1. and和or语法相关"></a>1. and和or语法相关</h4><p>  在不加括号的前提下and的优先级大于or<br>  <code>1 or 4 and 5</code>此例子运算时先进行and的运算再进行or的运算。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operation</th>
<th style="text-align:center">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x or y</td>
<td style="text-align:center">if x is false, then y, else x</td>
</tr>
<tr>
<td style="text-align:center">x and y</td>
<td style="text-align:center">if x is false, then x, else y</td>
</tr>
<tr>
<td style="text-align:center">not x</td>
<td style="text-align:center">if x is false, then true, else false</td>
</tr>
</tbody>
</table>
<blockquote>
<p>or运算即是，前者为真即前者，前者为假即是后者。<br>and运算即为，前者为假即前者，前者为真即后者。<br>or和and的运算结果相反。</p>
</blockquote>
<h4 id="2-python中所有的空"><a href="#2-python中所有的空" class="headerlink" title="2. python中所有的空"></a>2. python中所有的空</h4><ul>
<li>None</li>
<li>False</li>
<li>0,以及所有表示0的数字类型。如0，0.0，0L</li>
<li>空集合。dict，tuple，list，dict，set。。。</li>
</ul>
<h4 id="3-lambda（匿名函数）"><a href="#3-lambda（匿名函数）" class="headerlink" title="3. lambda（匿名函数）"></a>3. lambda（匿名函数）</h4><p>栗子：<code>lambda x: x % n &gt; 0</code><br>python中的lambda是简化函数，上栗中可以写为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function li(x):</div><div class="line">    <span class="keyword">return</span> x % n &gt; <span class="number">0</span></div></pre></td></tr></table></figure>
<p>此间的n是上式中传下来的数据。</p>
<h4 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h4><p>Python中以<code>_</code>前缀来实现量的私有。大部分正常命名，类似<code>abc,xyz,PI</code>等默认public类型。而以<code>_</code>开头的命名默认为private，无法被直接引用，或者说不应该被直接引用，而<code>__name__,__author__,__doc__</code>则都是特殊变量，能够被直接引用，但都有各自的特殊用途。<br>栗子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></div><div class="line"><span class="keyword">return</span> <span class="string">'Hello, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> _private_1(name)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> _private_2(name)</div></pre></td></tr></table></figure>
<h4 id="5-动态语言与静态语言"><a href="#5-动态语言与静态语言" class="headerlink" title="5. 动态语言与静态语言"></a>5. 动态语言与静态语言</h4><p>java属于静态语言,python是静态语言，如下同样意义的方法，java限定了传入的参数只能为Animal或者Animal的子类的对象才能运行，而动态语言的python只需要传入有run方法的对象即可。<del>动态语言的<strong>鸭子类型</strong></del></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toRun</span><span class="params">(Animal animal)</span></span>&#123;</div><div class="line">  animal.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toRun</span><span class="params">(Animal animal)</span>:</span></div><div class="line">  animal.run()</div></pre></td></tr></table></figure>
<h4 id="6-常用三方库"><a href="#6-常用三方库" class="headerlink" title="6. 常用三方库"></a>6. 常用三方库</h4><p>。。。待收集~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些学习过程中收集的小tip~&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结（3）</title>
    <link href="https://xblydxj.xyz/2017/06/06/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(3)/"/>
    <id>https://xblydxj.xyz/2017/06/06/Python基础总结(3)/</id>
    <published>2017-06-06T05:32:57.000Z</published>
    <updated>2017-06-06T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>+1s.  <strong>面向对象相关</strong></p>
<a id="more"></a>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote>
<p>Object Oriented Programing(OOP)面向对象编程</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div></pre></td></tr></table></figure>
<p>类比于java，<code>__init__</code>函数相当于构造函数，<code>self</code>代表自身，必须传的参数。当定义了<code>__init__</code>方法之后，创建其实例时需要将对应的参数也传入。</p>
<ol>
<li><p>成员变量私有化</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></div><div class="line">    self.__name = name</div><div class="line">    self.__score = score</div></pre></td></tr></table></figure>
</li>
<li><p>数据封装</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">      self.name = name</div><div class="line">      self.score = score</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">      print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.print_score()</div><div class="line">Bart Simpson: <span class="number">59</span></div></pre></td></tr></table></figure>
</li>
<li><p>属性私有化<br>成员变量前添加<code>_</code>即是将变量私有化，使其无法被外部直接访问，可以添加get，set方法进行间接访问。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">     <span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></div><div class="line">     <span class="keyword">return</span> self.__score</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></div><div class="line">    self.__score = score</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</div><div class="line">        self.__score = score</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'bad score'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>继承多态</p>
<p>父类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Animal is running...'</span>)</div></pre></td></tr></table></figure>
<p>子类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Dog is running...'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Eating meat...'</span>)</div></pre></td></tr></table></figure>
<p>关系:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(c, Animal)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取对象信息</p>
<ul>
<li><p>type():</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'str'</span>)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="keyword">None</span>)</div><div class="line">&lt;type(<span class="keyword">None</span>) <span class="string">'NoneType'</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">()</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(fn)==types.FunctionType</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(abs)==types.BuiltinFunctionType</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="keyword">lambda</span> x: x)==types.LambdaType</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)))==types.GeneratorType</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 判断两个变量类型是否相同</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>) == type(<span class="number">456</span>)</div><div class="line">true</div></pre></td></tr></table></figure>
</li>
<li><p>isinstance():</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'a'</span>, str)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, int)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">b'a'</span>, bytes)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>dir():<br>获得对象的所有属性和方法:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'ABC'</span>)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'format_map'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isdecimal'</span>, <span class="string">'isdigit'</span>, <span class="string">'isidentifier'</span>, <span class="string">'islower'</span>, <span class="string">'isnumeric'</span>, <span class="string">'isprintable'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'maketrans'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>获取各项属性：<br>创建实例对象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.x = <span class="number">9</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> self.x * self.x</div><div class="line"></div><div class="line">obj = MyObject()</div></pre></td></tr></table></figure>
<p>各项方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'x'</span>) <span class="comment"># 有属性'x'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(obj, <span class="string">'y'</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性'y'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'y'</span>) <span class="comment"># 获取属性'y'</span></div><div class="line"><span class="number">19</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y <span class="comment"># 获取属性'y'</span></div><div class="line"><span class="number">19</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'power'</span>) <span class="comment"># 有属性'power'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'</span></div><div class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn = getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'并赋值到变量fn</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn <span class="comment"># fn指向obj.power</span></div><div class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn() <span class="comment"># 调用fn()与调用obj.power()是一样的</span></div><div class="line"><span class="number">81</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h3><ol>
<li><p>为对象和类添加方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line">s = Student()</div><div class="line"><span class="comment"># 1.添加属性</span></div><div class="line">s.name = <span class="string">'Michael'</span></div><div class="line"></div><div class="line"><span class="comment"># 2.为对象添加方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span></div><div class="line">  self.age = age</div><div class="line"></div><div class="line">form types <span class="keyword">import</span> MethodType</div><div class="line">s.set_age = MethodType(set_age, s)</div><div class="line"></div><div class="line"><span class="comment"># 3.为类添加方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self, gender)</span>:</span></div><div class="line">  self.gender = gender</div><div class="line"></div><div class="line">Student.set_gender = set_gender</div></pre></td></tr></table></figure>
</li>
<li><p><code>__slots__</code>属性：<br>类里限制一些能被修改的属性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 限定只有name和age能被修改，</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">  __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)；</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></div><div class="line"><span class="comment">#报错</span></div></pre></td></tr></table></figure>
<p>ps:只对当前类有效，子类无效。</p>
</li>
<li><p><code>@property</code>方法<br>get方法使用<code>@property</code>进行包装，便自动生成一个对应的set方法的注解</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._birth</div><div class="line"></div><div class="line"><span class="meta">    @birth.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></div><div class="line">        self._birth = value</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</div></pre></td></tr></table></figure>
</li>
<li><p>多继承</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># 大类:</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span><span class="params">(Animal)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># 各种动物:</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span><span class="params">(Bird)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span><span class="params">(Bird)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># 动物的性质：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">      print(<span class="string">'Running...'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyable</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></div><div class="line">      print(<span class="string">'Flying...'</span>)</div><div class="line"></div><div class="line"><span class="comment">#多继承的蝙蝠</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal, Flyable)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>对于bat来说 Animal 和Mammal都是主线，而Flyable是支线，这样混入支线的设计叫做MixIn，命名时可能也会使用FlyableMixIn。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;+1s.  &lt;strong&gt;面向对象相关&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑两个github账户</title>
    <link href="https://xblydxj.xyz/2017/06/01/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%A4%E4%B8%AAhexo/"/>
    <id>https://xblydxj.xyz/2017/06/01/同一台电脑两个hexo/</id>
    <published>2017-06-01T10:21:43.000Z</published>
    <updated>2017-06-02T05:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>经常怀疑产品经理的脑洞，但是真碰见这样的需求的时候我也很绝望~<br>同一台电脑两个hexo，其实主题应该是这个。<br><a id="more"></a></p>
<h3 id="同一台电脑两个github账户"><a href="#同一台电脑两个github账户" class="headerlink" title="同一台电脑两个github账户"></a>同一台电脑两个github账户</h3><blockquote>
<p>这样的需求我也是不知所措，略过那些需求来源。</p>
</blockquote>
<p>我想要在同一台电脑上部署两个hexo的博客，但是github的{username}.github.io这样的格式定死了只能一个账户适配一个博客。不过mac上的终端第一次用git的时候也已经把账户信息记录在了<code>~\.gitconfig</code>下的</p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/7-github-2.png" alt="7-github-2"></p>
<p>显示隐藏文件：<code>defaults write com.apple.finder AppleShowAllFiles -bool true</code>,终端输入之后可以看到隐藏文件。<br>这是我们第一次记录的github账号以及账号对应的邮箱。修改方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name&quot;username&quot;</div><div class="line">git config user.email&quot;xxx@xx.com&quot;</div></pre></td></tr></table></figure>
<ol>
<li><p><strong>生成ssh密钥：</strong><br> 假设：<br> A账号的邮箱是：xxx@xx.com<br> B账号的邮箱是：yyy@yy.com<br> 那么首先分别为他们生成对应的ssh密钥并命名保存：<br> <code>$ ssh-keygen -t rsa -C &quot;xxx@xx.com&quot;</code><br> <img src="http://oni7r1rj8.bkt.clouddn.com/7-github-3.png" alt="7-github-3"><br>输入：<code>/Users/{yourname}/.ssh/id_rsa_a</code>之后连按三个回车，保存A的密钥。<br> B同理：<br> <code>$ ssh-keygen -t rsa -C &quot;yyy@yy.com&quot;</code><br> <img src="http://oni7r1rj8.bkt.clouddn.com/7-github-4.png" alt="7-github-4"><br>输入：<code>/Users/{yourname}/.ssh/id_rsa_b</code>之后连按三个回车，保存B的密钥。</p>
</li>
<li><p><strong>保存至github的账户：</strong></p>
<ul>
<li><p>复制A账号需要的公钥：<code>pbcopy &lt; ~/.ssh/id_rsa_a.pub</code><br><a href="https://github.com/settings/keys" target="_blank" rel="external">添加ssh公钥</a><del>得先登录A账号</del><br><img src="http://oni7r1rj8.bkt.clouddn.com/7-github-5.png" alt="7-github-5"><br>最后马赛克是xxx@xx.com，就是当前登录的账号对应的邮箱。然后Add。</p>
<ul>
<li>复制B账号需要的公钥：<code>pbcopy &lt; ~/.ssh/id_rsa_b.pub</code><br>登出A账号，登录B账号，同样的页面，添加ssh公钥，将复制的b密钥粘贴保存进去。邮箱与b账号注册的保存的邮箱相同。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>多账号配置：</strong><br> 在<code>~/.ssh</code>文件夹先新建一个config文件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#A账号</div><div class="line">Host github.com_a</div><div class="line">  HostName github.com</div><div class="line">  IdentityFile ~/.ssh/id_rsa_a</div><div class="line"></div><div class="line">#B账号</div><div class="line">Host github.com_b</div><div class="line">  HostName github.com</div><div class="line">  IdentityFile ~/.ssh/id_rsa_b</div></pre></td></tr></table></figure>
<p> 下一次的push可以这样，就是用A账号提交。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com_a:xxx/xxx.git</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p> 同理改为github.com_b就是用B账号提交。</p>
</li>
<li><p><strong>使用git上传代码</strong><br> github.io创建仓库时前缀需要与用户名相同，所以不能再同一个账户下搭建两个io博客。所以只能新注册一个b账号。<br> 在这之前，我们分别在两个文件夹下已经搭建好了hexo博客。然后<code>hexo d</code>时：<br> <code>ERROR Deployer not found:git</code>报错了。<del>有人知道的话求告知</del><br>修改了对应的账号也还是不行。所以两个账号都用hexo d来上传代码我已经放弃了= =。<br>既然这样，上面的配置就起作用了！两个博客时只有一个账号的可以使用hexo d，另一个账号直接在hexo g之后进入public文件夹，使用git，push到对应的仓库即可。效果是一样的：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ cd public</div><div class="line">$ git init</div><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;first commit&quot;</div><div class="line">$ git remote add origin git@github.com_b:yyy/yyy.github.io.git</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p> 这里使用了B账号对应的hostname，这样即是使用b账号的密钥进行git。下一次再进行操作时候只需要:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;next commit&quot;</div><div class="line">git push</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>有时候会遇上这个问题，在hexo g的时候：<br><code>Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;</code><br>只需要<br><code>$ npm install hexo --no-optional</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常怀疑产品经理的脑洞，但是真碰见这样的需求的时候我也很绝望~&lt;br&gt;同一台电脑两个hexo，其实主题应该是这个。&lt;br&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="干货" scheme="https://xblydxj.xyz/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="Hexo" scheme="https://xblydxj.xyz/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>沉迷国漫，无法自拔</title>
    <link href="https://xblydxj.xyz/2017/05/31/%E6%B2%89%E8%BF%B7%E5%9B%BD%E6%BC%AB%EF%BC%8C%E6%97%A0%E6%B3%95%E8%87%AA%E6%8B%94/"/>
    <id>https://xblydxj.xyz/2017/05/31/沉迷国漫，无法自拔/</id>
    <published>2017-05-31T01:55:22.000Z</published>
    <updated>2017-06-30T06:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>从上个礼拜开始，原本动漫、漫画基本不看的我被多人安利，上了b站看了<a href="http://bangumi.bilibili.com/anime/2543/" target="_blank" rel="external">《狐妖小红娘》</a>。然鹅，就此一发不可收拾<del>大口狗粮</del>。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="470" height="86" src="//music.163.com/outchain/player?type=2&id=405253631&auto=1&height=66"></iframe>

<p>这首歌是在看这番之前听的，当时没有收藏，也并没仔细听，可能不算特别好听。但在看过番之后，每一次听都能起鸡皮疙瘩。</p>
<ul>
<li><p><strong>持有一半的梦尚未回还</strong></p>
<p>  述及故事背景，人与妖相恋却不能长久，而两人能够在相思树下许愿，在人的来世能够在狐妖们帮助下回忆起前世，也就是故事的概括：<strong>转世续缘</strong>，而这一句歌词即为妖寻找自己转世恋人的期盼。</p>
</li>
<li><strong>愿今生将你的心头填满</strong></li>
<li><strong>一条殊途，绝不回转</strong></li>
<li><strong>一同经历过的万千时光</strong></li>
<li><p><strong>不及你与他初见的模样</strong></p>
<p>  前一世未能为爱人做的，这一世有了更多的期待与憧憬，对这样一个目标的实现没有什么可以动摇。前进的途中想的都是过去一起的时光，以及最初见到的样子。</p>
</li>
<li><strong>天月将白，赴往涂山</strong></li>
<li><strong>为你闯出的前方</strong></li>
<li><strong>贯穿世界的消亡</strong></li>
<li><p><strong>将弱小的自己藏匿抹杀</strong></p>
<p>  苦情巨树位于涂山，共赴涂山许下转世续缘，原本弱小的自己也拼命强大，转世寻找的过程，经历的千百年，无法动摇这样的期待，即使再艰难也不会停止。</p>
</li>
<li><strong>可所有你说的话</strong></li>
<li><p><strong>全部都被遗忘</strong></p>
<p>  转世后的人，遗忘了前一世，这也是续缘的最大的困难。</p>
</li>
<li><strong><em>轮转</em></strong></li>
<li><strong>你的手穿透我 这整个胸膛</strong></li>
<li><strong>记忆与爱填满</strong></li>
<li><p><strong>这整个心脏</strong></p>
<p>  故事有好几个章节，而贯穿全程的月红篇中，有一幕就是东方月初为了涂山红红和自己的将来，满脸笑容的将红红的手穿过自己的胸，为了染上自己的血以对抗敌人。<del>也就是封面</del></p>
</li>
<li><strong>前生所有未能说过的话</strong></li>
<li><strong>在你心中无法撼动的他</strong></li>
<li><strong>所有为你而行的空幻梦想</strong></li>
<li><strong>都不及最后与你许的愿望</strong></li>
<li><p><strong>来相思树下</strong></p>
<p>  故事背景下，人与妖的恋情因为寿命的差距而致使妖的孤独，涂山上的苦情巨树也正是为解决这样的问题而存在的，为其开启转世续缘，但这样也只是缘分，能够相遇，却不能让人回忆起前世，这需要妖的努力和涂山小红仙的帮助，许下这样一个愿望，为此付诸一切，只为了这样一个“空幻的梦想”。</p>
</li>
</ul>
<blockquote>
<p>在这期间，b站里看到了很多弹幕，即是在看其他视频也常常能看见<strong>来相思树下</strong>这句话。国漫对于徜徉已久的日漫从技术角度来讲难以超越，甚至相差甚远，但从这一部中我看到了国漫拥有的优势，故事的细腻情感描写，以及熟知于国人的各种ip，类似转世这样的情节，大概也只有中国有这样正统的来源吧。<br>在动漫中，台词什么的各种出戏，或是无厘头了一些，不过可能更能中和情感，毕竟面向大众不是只想看这样纯言情的。</p>
</blockquote>
<p>除了这首歌，故事中印象深刻的台词也有许多，而最近被刷屏最频繁的就是这句：</p>
<p><strong>如果我们能活着出去的话，大漠，草原，万水千山，你愿意陪我一起看吗？</strong></p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-2.png" alt="王权富贵篇"></p>
<hr>
<p>除了故事，小红娘里好几首歌都很好听，《梦回环》<del>就是上面那首</del>即是王权富贵篇的主题曲。还有<br>《若当来世》：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="470" height="86" src="//music.163.com/outchain/player?type=2&id=462686465&auto=0&height=66"></iframe>

<p>依旧是与故事相应的歌词，听着很有感觉。</p>
<p>网易云音乐里《狐妖小红仙》的合集：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="470" height="450" src="//music.163.com/outchain/player?type=1&id=35233089&auto=0&height=430"></iframe>

<h3 id="记"><a href="#记" class="headerlink" title="记"></a>记</h3><p>   因为《狐妖小红娘》补了好多个番，许多人都有一种国漫崛起的想法，但对于这些作品依旧是褒贬不一的，有人说要给国漫更多的宽容，但另一部分人认为就是因为有了更多宽容才抑制了国漫的发展。辩证的看法总结是：宽容并批判，我看了，有些可能看这标题就是无感，也点进去看了，看了之后得出更多的想法，对他做一些评价，国漫的发展，需要批评修正，以及宽容带来的促进。<br>   <a href="http://bangumi.bilibili.com/anime/2543/" target="_blank" rel="external">《狐妖小红娘》</a>和<a href="http://bangumi.bilibili.com/anime/5852?from=search&amp;seid=12052103350506266059" target="_blank" rel="external">《全职高手》</a>以及秦时明月系列（包括<a href="http://list.youku.com/show/id_ze4c5befee10111e5b432.html?spm=a2h0j.8191423.subscription_wrap.DD~A" target="_blank" rel="external">天行九歌</a>和<a href="http://list.youku.com/show/id_z9a8e9ba0605611e2a19e.html?spm=a2h0j.8191423.subscription_wrap.DD~A" target="_blank" rel="external">秦时明月</a>）暂且算是现在最受欢迎的国漫。秦时明月算是比较早的，走的路线是3d，而前两者是动漫，作比较的也就少一些。全职高手方面更多的是吃ip，以小说<a href="http://book.qidian.com/info/1887208" target="_blank" rel="external">《全职高手》</a>动画化，而在这部动漫出来之前，b站已经有了很多宣传。不过从我自己角度来看这部动漫，情节方面没有什么出彩的地方，不过画工以及技术角度相对较强，人物大多靠看过小说的人自己脑补。总之，我其实是不理解他这么受欢迎的原因的。<br>   秦时明月则非常出彩，从夜尽天明到现在的君临天下，可以看得出他的进步，只是出的确实比较慢，一集去头去尾去前情提要去下集预告，正片大概5到10分钟，一般不超过十分钟，我看的时候想等着养肥再看，等着等着就忘记了，然后下一次再看的时候发现，也还是就养了这几集。天行九歌，作为秦时明月的一部扩展番外，制作精良，画面以及技术的体现是3D国漫的一个代表。<br>   3d的国漫不得不提的还有画江湖的系列，人物的外形塑造与秦时明月风格迥异，两部都是那种一眼就能看出出自谁家的作品。画江湖系列，更新时间比秦时明月频繁，情节方面也是可圈可点。<br>   到这里要提到另一点，<em>个人认为</em> 一部略微成熟的作品需要的不是一个主角，略微成熟的作品可能会更多的塑造其他的人物性格，从而描写主旨，以事为题，不以人为题。这一点上，秦时明月较好。略微成熟，不过还是另一个说法，动漫的受众年龄大多数可能为15到25之间，对于这方面可能要求不多。<br>   除此之外，现在正在更新连载的一些我个人认为还不错的国漫：《降灵记》《快把我哥带走》《武庚纪》等等。<br>   总之，批判与宽容共存，是之后对国漫的态度，期待他的发展。</p>
<hr>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul>
<li><p>《全职高手》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-5.jpeg" alt="全职高手"></p>
</li>
<li><p>《秦时明月》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-3.jpeg" alt="秦时明月"></p>
</li>
<li><p>《天行九歌》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-4.png" alt="天行九歌"></p>
</li>
<li><p>《画江湖之不良人》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-6.jpeg" alt="画江湖"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;从上个礼拜开始，原本动漫、漫画基本不看的我被多人安利，上了b站看了&lt;a href=&quot;http://bangumi.bilibili.com/anime/2543/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《狐妖小红
    
    </summary>
    
      <category term="live" scheme="https://xblydxj.xyz/categories/live/"/>
    
    
      <category term="live" scheme="https://xblydxj.xyz/tags/live/"/>
    
      <category term="日常" scheme="https://xblydxj.xyz/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="话题" scheme="https://xblydxj.xyz/tags/%E8%AF%9D%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【video】Endless road</title>
    <link href="https://xblydxj.xyz/2017/05/24/%5Bvideo%5DEndless%20road/"/>
    <id>https://xblydxj.xyz/2017/05/24/[video]Endless road/</id>
    <published>2017-05-23T20:48:00.000Z</published>
    <updated>2017-05-25T08:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【video】Endless-road"><a href="#【video】Endless-road" class="headerlink" title="【video】Endless road"></a>【video】Endless road</h1><a id="more"></a>
<iframe height="400" width="100%" src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=8d35ec51b4d942e9072950f6d25cde2a&tvId=238982400&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="1"></iframe>

<p>随意的浏览网易云，看见这样一个短视频。嗯，有触动。<del>我眼睛进沙子了。</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【video】Endless-road&quot;&gt;&lt;a href=&quot;#【video】Endless-road&quot; class=&quot;headerlink&quot; title=&quot;【video】Endless road&quot;&gt;&lt;/a&gt;【video】Endless road&lt;/h1&gt;
    
    </summary>
    
      <category term="生活" scheme="https://xblydxj.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Live" scheme="https://xblydxj.xyz/tags/Live/"/>
    
      <category term="Video" scheme="https://xblydxj.xyz/tags/Video/"/>
    
  </entry>
  
  <entry>
    <title>博客修改记录</title>
    <link href="https://xblydxj.xyz/2017/05/18/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
    <id>https://xblydxj.xyz/2017/05/18/博客修改记录/</id>
    <published>2017-05-18T07:17:08.000Z</published>
    <updated>2017-05-26T02:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录博客搭建，修改的过程以及相关方法。</p>
<a id="more"></a>
<h3 id="博客修改记录"><a href="#博客修改记录" class="headerlink" title="博客修改记录"></a>博客修改记录</h3><ul>
<li><p>4-19<br>  建站~，使用<a href="https://material.viosey.com/" target="_blank" rel="external"> Material </a>的theme。</p>
</li>
<li><p>5-16<br>  由于代码高亮等以及许多功能的缺失，所以改用<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>但是next不好看，所以想要改改。</p>
</li>
<li><p>5-17<br>  发现一个<a href="http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html" target="_blank" rel="external">厉害的妹子博主</a>，有我正需要的material效果。</p>
</li>
<li><p>5-18<br>  从昨天的教程里换上了card效果，以及nest背景。</p>
</li>
<li><p>5-21<br>  开始修改文章列表样式，卡片图上嵌，下方文章介绍。以及一些小图标等小改动。</p>
</li>
<li><p>5-23<br>  初版完成。</p>
</li>
<li><p>5-24<br>  markdown插入视频</p>
</li>
<li><p>6-7<br>  放弃disqus，改用网易云跟帖</p>
</li>
<li><p>8-8<br>  由于网易云跟贴的关闭，改用畅言</p>
</li>
</ul>
<h3 id="涉及模块"><a href="#涉及模块" class="headerlink" title="涉及模块"></a>涉及模块</h3><ol>
<li><p>图标<br> 原本想要改全部的icon，不过后面看了一下上方菜单的那些改的有点麻烦就放弃了~。不过文章列表部分的icon还是可以改一改的。<br> 这是原来的样子：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-1.png" alt="博客修改记录-1"><br> 这是改完的样子：<img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-2.png" alt="博客修改记录-2"><br> 关于icon的文件位置：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-3.png" alt="博客修改记录-3"><br> 这是icon的代码位置：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-4.png" alt="博客修改记录-4"><br> 首先，在<a href="http://iconfont.cn/" target="_blank" rel="external">阿里图标库</a>里找到需要的换的icon：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-5.png" alt="博客修改记录-5"><br> 点击进入，将需要的图标收入购物车，并添加至项目：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-6.png" alt="博客修改记录-6"><br> 然后将上方的代码复制到custom.styl文件内：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-7.png" alt="博客修改记录-7"><br> 并在post.swig对应的css文件内写上对应的css：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-8.png" alt="博客修改记录-8"><br> css：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-9.png" alt="博客修改记录-9"><br> 最后在post.swig中应用：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-10.png" alt="博客修改记录-10"><br> post-meta下的即是文章列表里那些图标的位置，每个对应的查找一下原来的fontawesome的外形之后进行替换即可。</p>
</li>
<li><p>图片<br>next，muse的theme是极简风格，不过个人喜欢card，以及想要配上与文章对应的图，让页面内容更加丰富美观一些。<br>效果：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-12.png" alt="博客修改记录-12"><br>添加了头部的图片，以及为了有层次效果也添加了阴影效果。也将标题放入图片中。<br>首先：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-11.png" alt="博客修改记录-11"><br>依旧是这个post.swig文件内，其中有一个头部：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-13.png" alt="博客修改记录-13"><br>post-meta上的部分使用一个div包裹<del>上方div中的内容被我折叠了</del>，div定义了一个背景图片，背景图片的来源引用自文章中的picture属性，在自己的markdown文章中的定义方式：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-14.png" alt="博客修改记录-14"><br>也贴出他的css，目录依旧是：<code>next/source/css/_common/components/post/post.styl</code>：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-15.png" alt="博客修改记录-15"></p>
</li>
<li><p>插入视频<br>markdown本身无法插入视频，不过毕竟是在网页上加载，直接写html也是可以的：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-16.png" alt="博客修改记录-16"><br>复制这段代码到md文件中就可以直接加载了。<del>就是这么简单</del></p>
</li>
<li><p>添加搜狐畅言<br>next中已经集成了畅言的ui，我们只需要添加这样的appkey和appid，首先是<a href="http://changyan.kuaizhan.com/" target="_blank" rel="external">注册</a>而之后需要进行一步步认证，中间有需要一个icp备案号，由于icp备案比较麻烦，所以在畅言里：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-17.png" alt="博客修改记录-17"><br>然后：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-18.png" alt="博客修改记录-18"><br>中间跳过一些无所谓的设置，域名以及界面随意，设置完成后跳转至：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-19.png" alt="博客修改记录-19"><br>然后：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-20.png" alt="博客修改记录-20"><br>这样就有了appid和appkey了，之后将这俩添加到next的config.yml文件中</p>
</li>
</ol>
<h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h3><ol>
<li>彩色图片插入问题，svg图片植入</li>
<li>背景优化。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录博客搭建，修改的过程以及相关方法。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Blog" scheme="https://xblydxj.xyz/tags/Blog/"/>
    
      <category term="干货" scheme="https://xblydxj.xyz/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结（2）</title>
    <link href="https://xblydxj.xyz/2017/05/12/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(2)/"/>
    <id>https://xblydxj.xyz/2017/05/12/Python基础总结(2)/</id>
    <published>2017-05-12T03:36:58.000Z</published>
    <updated>2017-06-06T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇~ <strong>函数相关知识以及模块的使用等</strong></p>
<a id="more"></a>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>高级函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line"><span class="keyword">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>, <span class="number">-5</span>, abs);</div><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
<p> 可以将函数abs当做变量传入add函数参与运算。</p>
<ul>
<li><p>map:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</div></pre></td></tr></table></figure>
<p>作为键值对，以后者的Iterator作为底数进行前者的迭代运算并输出。</p>
</li>
<li><p>reduce:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure>
<p>抽取后者的Iterator的前两个元素进行前者的运算并迭代输出。</p>
</li>
<li><p>filter:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</div><div class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>]))</div><div class="line"><span class="comment"># 结果: ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>
<p>第二个判断为s为空则返回s.strip()<del>(去除空格)</del>，s不为空返回s。  </p>
</li>
<li><p>sorted:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. 正常排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</div><div class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</div><div class="line"></div><div class="line"><span class="comment"># 2. 依照绝对值排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</div><div class="line"></div><div class="line"><span class="comment"># 3. 忽略大小写并反向排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>返回函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            ax = ax + n</div><div class="line">        <span class="keyword">return</span> ax</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f()</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<p> 当调用lazy_sum时sum函数并不会立即运行，此时的f即是sum函数，调用f()时才开始运行内部，以此实现延时运行的效果。</p>
</li>
<li><p>闭包</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line"><span class="keyword">return</span> fs</div></pre></td></tr></table></figure>
<p> 第一种方式在调用时返回值都为9，因为内部i在第一次被调用之后被作为返回值返回，所以函数并未被清理，i的值依旧为上一次运行结果。而第二种在返回函数的内部单独传入一个临时变量，这个临时变量的作用域止于f函数，并在每一次运行时都重新传入新的j，所以运行结果为1，4，9.闭包原则。</p>
</li>
<li><p>匿名函数<br> python的匿名函数即为lambda表达式:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>装饰器</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def log(text):</div><div class="line">    def decorator(func)</div><div class="line">        def wrapper(*args, **kw):</div><div class="line">            print('%s %s():' % (text, func.__name__))</div><div class="line">            return func(*args, **kw)</div><div class="line">        return wrapper</div><div class="line">    return decorator</div><div class="line"></div><div class="line">@log('execute')</div><div class="line">def now():</div><div class="line">    print('2015-3-25')   </div><div class="line"></div><div class="line">&gt;&gt;&gt; now()</div><div class="line">execute now():</div><div class="line">2015-3-25</div></pre></td></tr></table></figure>
<p> 定义log函数，对now函数进行标记。运行时也同时运行log方法。相当于运行了<br> <code>now = log(&#39;execute&#39;)(now)</code></p>
<p> 最后写法:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. 带参数</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2. 不带参数</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
</li>
<li><p>偏函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">max2 = functools.partial(max, <span class="number">10</span>)</div><div class="line"></div><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p> 偏函数的作用：固定一些参数，简化需要传入的参数数量。<br> 此时<code>int2(&#39;10010&#39;)</code>相当于</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kw = &#123; <span class="string">'base'</span>: <span class="number">2</span> &#125;</div><div class="line">int(<span class="string">'10010'</span>, **kw)</div></pre></td></tr></table></figure>
<p> 以及<code>max2(5,6,7)</code>相当于</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">max(*args)</div><div class="line"><span class="comment">#结果为10</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol>
<li><p>使用:<br> 栗：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># 1. 文档注释，所有模块代码的第一个字符串都被视为文档注释</span></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line"><span class="comment"># 2. 标记作者（廖雪峰）</span></div><div class="line">__author__ = <span class="string">'Michael Liao'</span></div><div class="line"></div><div class="line"><span class="comment"># 3. 导入内建的sys模块，sys模块有一个argv变量，用list存储了命令行的所有参数，其第一个参数永远是模块的文件名</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print(<span class="string">'Hello, world!'</span>)</div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Too many arguments!'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 4. 标记作用域</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div><div class="line"></div><div class="line"><span class="comment"># 5. 结果</span></div><div class="line">$ python hello.py Michael</div><div class="line">Hello, Michael!</div></pre></td></tr></table></figure>
</li>
<li><p>第三方模块</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成图片的缩略图</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">im = Image.open(<span class="string">'test.png'</span>)</div><div class="line">print(im.format, im.size, im.mode)</div><div class="line">im.thumbnail((<span class="number">200</span>,<span class="number">100</span>))</div><div class="line">im.save(<span class="string">'thumb.jpg'</span>, <span class="string">'JPEG'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>待续~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇~ &lt;strong&gt;函数相关知识以及模块的使用等&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结（1）</title>
    <link href="https://xblydxj.xyz/2017/04/24/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(1)/"/>
    <id>https://xblydxj.xyz/2017/04/24/Python基础总结(1)/</id>
    <published>2017-04-24T09:48:03.000Z</published>
    <updated>2017-05-17T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>想写个爬虫，开始看看python。<strong>安装、数据类型、集合数组、判断和循环、函数以及一些高级方法</strong></p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>mac系统下如果安装homebrew只需要<code>brew install python3</code>，这里直接安装的是python3。</li>
<li>也可以直接在<a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="external">官网</a>下载安装。</li>
<li><p>解释器</p>
<blockquote>
<p>python运行需要解释器，类似java的编译器，python有各类支持的解释器。</p>
</blockquote>
<ul>
<li>CPython：由C语言开发的解释器，安装python3时也已直接获得，是使用最广泛的解释器。</li>
<li>IPython：比CPython多了一些交互。</li>
<li>PyPy：运用了JIT，能够动态编译，且运行结果与CPython可能有所不同。</li>
<li>Jython：使用java语言开发的解释器，能够将其编译成java字节码执行。</li>
<li>。。。</li>
<li>还是用CPython吧</li>
</ul>
</li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol>
<li>整数，浮点数，字符串，布尔值，空值，变量，常量。</li>
<li>空值表示方式为None。</li>
<li>str使用unicode每个字符占用多个字节，当在网络传输时需要转为bytes型的字符串，以<code>b&#39;字符串&#39;</code>这样形式存在即为bytes类型。</li>
<li>相关方法：<ul>
<li><code>ord(&#39;A&#39;)</code>:此段输出结果为A的ascll码即65.</li>
<li><code>chr(&#39;65&#39;)</code>:输出结果为A</li>
<li><code>&#39;ABC&#39;.encode(&#39;ascii&#39;)</code>：输出结果为b’ABC’</li>
<li><code>b&#39;ABC&#39;.decode(&#39;ascii&#39;)</code>：输出结果为’ABC’</li>
<li><code>len(&#39;中文&#39;.encode(&#39;utf-8&#39;))</code> 对等于 <code>len(b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;)</code></li>
</ul>
</li>
<li>格式化<ul>
<li>输出与c语言类似，整数%d,浮点数%f,字符串s%，十六进制数为%x，通常可以直接使用s%都能够将数值转为字符串。</li>
</ul>
</li>
</ol>
<h3 id="集合数组"><a href="#集合数组" class="headerlink" title="集合数组"></a>集合数组</h3><ol>
<li>list: <code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code><ul>
<li><code>len(classmates)</code>：用于获取list长度</li>
<li><code>classmates[0]</code>：根据索引直接访问元素</li>
<li><code>classmates[-1]</code>：索引添加负号即从尾部开始进行索引。索引-1即为最后一个元素。</li>
<li><code>classmates.append(&#39;Adam&#39;)</code>：添加元素</li>
<li><code>classmates.insert(1,&#39;Jack&#39;)</code>：插入元素</li>
<li><code>classmates.pop()</code>：弹出最后一个元素</li>
<li><code>classmates.pop(1)</code>：弹出指定索引元素</li>
</ul>
</li>
<li>tuple：<code>classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code>: tuple类似数组，无法被修改，list类似集合。不能使用append，pop等方法。</li>
<li>dict：<code>d = {&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85}</code><ul>
<li><code>&#39;Thomas&#39; in d</code>：判断是否在字典中，输出结果为false</li>
<li><code>d.get(&#39;Thomas&#39;, -1)</code>：获取key值</li>
<li><code>d.pop(&#39;Bob&#39;)</code>：弹出指定key</li>
<li>相较于list，dict查找速度快，但内存占用大</li>
</ul>
</li>
<li>set：<code>s = set([1, 1, 2, 2, 3, 3])</code><ul>
<li>set的value值不可见，是key不可重复的dict，</li>
</ul>
</li>
</ol>
<h3 id="判断与循环"><a href="#判断与循环" class="headerlink" title="判断与循环"></a>判断与循环</h3><ol>
<li><p>if语句：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</div><div class="line">    &lt;执行<span class="number">1</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</div><div class="line">    &lt;执行<span class="number">2</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</div><div class="line">    &lt;执行<span class="number">3</span>&gt;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;执行<span class="number">4</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>for循环：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">print(name)</div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</div><div class="line">   sum = sum + x</div><div class="line">print(sum)</div></pre></td></tr></table></figure>
</li>
<li><p>while循环：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line">n = <span class="number">99</span></div><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">   sum = sum + n</div><div class="line">   n = n - <span class="number">2</span></div><div class="line">print(sum)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>数据类型转换</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
</li>
<li><p>定义函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
</li>
<li><p>空函数：占位符pass</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据类型以及异常</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
</li>
<li><p>返回多个值：其实际返回了一个tuple</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数：调用时power(5),与power(5,2）结果相同</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
</li>
<li><p>可变参数：传入个数随意</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
</li>
<li><p>关键字参数：额外的参数传入</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>命名关键字：只会接受 <em> 之后的参数，而可变参数后跟随的参数不需要添加 </em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div></pre></td></tr></table></figure>
</li>
<li><p>参数组合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div></pre></td></tr></table></figure>
</li>
<li><p>递归</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><ol>
<li><p>切片：截取list,包左不包右，左为0时可以省略，也可以使用-索引从后至前进行索引截取</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</div><div class="line">[<span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'Bob'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line">//从第一位开始，共<span class="number">10</span>位，间隔为<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</div><div class="line">从<span class="number">0</span>开始到最后，间隔为<span class="number">5</span></div></pre></td></tr></table></figure>
</li>
<li><p>迭代</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line">//查看key</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line">//查看value</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value <span class="keyword">in</span> d.values()</div><div class="line">//查看item</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()</div><div class="line">//判断对象是否是可迭代对象</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div><div class="line">//使用emulate函数将list变为索引-元素对</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div></pre></td></tr></table></figure>
</li>
<li><p>列表生成式</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//x*x为元素式，<span class="keyword">for</span>循环生成参数，</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div><div class="line">//<span class="keyword">for</span>循环嵌套</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>生成器generator</p>
<ul>
<li><p>斐波那契数列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        print(b)</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
</li>
<li><p>yield函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">print(<span class="string">'step 1'</span>)</div><div class="line"><span class="keyword">yield</span> <span class="number">1</span></div><div class="line">print(<span class="string">'step 2'</span>)</div><div class="line"><span class="keyword">yield</span>(<span class="number">3</span>)</div><div class="line">print(<span class="string">'step 3'</span>)</div><div class="line"><span class="keyword">yield</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
</li>
<li><p>使用for循环遍历第二个fib函数时，在运行至yield b时即中断，运行至for循环下一次，这样得不到fib函数的返回值。而使用next函数时遇yield即终止，并记录，下一次再使用next时才能得下一个结果。</p>
</li>
</ul>
</li>
<li><p>迭代器</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterable)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter([]), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p> 判断前者是否为可迭代的。list,tuple,dict,set,str,for循环,以及generator和yield搭配的function成为可迭代的。<br> 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。Iterator能够存储一个无限大的数据流，有自身固定长度的数据流无法作为迭代器。<br> 把list、dict、str等Iterable变成Iterator可以使用iter()函数。</p>
</li>
</ol>
<hr>
<p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想写个爬虫，开始看看python。&lt;strong&gt;安装、数据类型、集合数组、判断和循环、函数以及一些高级方法&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>过去文章链接</title>
    <link href="https://xblydxj.xyz/2017/04/17/%E8%BF%87%E5%8E%BB%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
    <id>https://xblydxj.xyz/2017/04/17/过去文章链接/</id>
    <published>2017-04-17T02:36:03.000Z</published>
    <updated>2017-08-08T08:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前在csdn上写过一些基础，用于复习整理。在这里新开博客就开个链接。</p>
<a id="more"></a>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="Java综述"><a href="#Java综述" class="headerlink" title="Java综述"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50527624" target="_blank" rel="external">Java综述</a></h4><h4 id="Java基础部分"><a href="#Java基础部分" class="headerlink" title="Java基础部分"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50527705" target="_blank" rel="external">Java基础部分</a></h4><h4 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50531198" target="_blank" rel="external">程序流程</a></h4><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50532893" target="_blank" rel="external">函数</a></h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50533084" target="_blank" rel="external">数组</a></h4><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50533227" target="_blank" rel="external">面向对象</a></h4><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50533348" target="_blank" rel="external">单例</a></h4><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50535421" target="_blank" rel="external">继承</a></h4><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50535578" target="_blank" rel="external">抽象类与接口</a></h4><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50536125" target="_blank" rel="external">异常</a></h4><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50536416" target="_blank" rel="external">多线程</a></h4><h4 id="String"><a href="#String" class="headerlink" title="String"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50537316" target="_blank" rel="external">String</a></h4><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50538901" target="_blank" rel="external">集合</a></h4><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50539499" target="_blank" rel="external">泛型</a></h4><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50540979" target="_blank" rel="external">IO流</a></h4><h4 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50563471" target="_blank" rel="external">网络编程</a></h4><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/50563702" target="_blank" rel="external">反射</a></h4><blockquote>
<p>以及一些小总结</p>
</blockquote>
<h4 id="for-与-while-true-的-区别"><a href="#for-与-while-true-的-区别" class="headerlink" title="for(;;) 与 while(true) 的 区别"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51175799" target="_blank" rel="external">for(;;) 与 while(true) 的 区别</a></h4><h4 id="为什么在写了equals方法之后还要写hashcode方法"><a href="#为什么在写了equals方法之后还要写hashcode方法" class="headerlink" title="为什么在写了equals方法之后还要写hashcode方法"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51176080" target="_blank" rel="external">为什么在写了equals方法之后还要写hashcode方法</a></h4><h4 id="六种单例设计模式，嗯，强行六种"><a href="#六种单例设计模式，嗯，强行六种" class="headerlink" title="六种单例设计模式，嗯，强行六种"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51183043" target="_blank" rel="external">六种单例设计模式，嗯，强行六种</a></h4><h4 id="Java中获取当前目录的方法"><a href="#Java中获取当前目录的方法" class="headerlink" title="Java中获取当前目录的方法"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51184358" target="_blank" rel="external">Java中获取当前目录的方法</a></h4><h3 id="Android基础和一些相关知识"><a href="#Android基础和一些相关知识" class="headerlink" title="Android基础和一些相关知识"></a>Android基础和一些相关知识</h3><h4 id="MySQL与JDBC"><a href="#MySQL与JDBC" class="headerlink" title="MySQL与JDBC"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51236460" target="_blank" rel="external">MySQL与JDBC</a></h4><h4 id="tomcat与http协议，servlet整合"><a href="#tomcat与http协议，servlet整合" class="headerlink" title="tomcat与http协议，servlet整合"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51237030" target="_blank" rel="external">tomcat与http协议，servlet整合</a></h4><h4 id="系统架构-amp-SDK目录"><a href="#系统架构-amp-SDK目录" class="headerlink" title="系统架构&amp;SDK目录"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51368047" target="_blank" rel="external">系统架构&amp;SDK目录</a></h4><h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51379666" target="_blank" rel="external">Android Studio</a></h4><h4 id="布局-amp-Logcat"><a href="#布局-amp-Logcat" class="headerlink" title="布局&amp;Logcat"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51385228" target="_blank" rel="external">布局&amp;Logcat</a></h4><h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51388663" target="_blank" rel="external">Activity</a></h4><h4 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51400537" target="_blank" rel="external">BroadcastReceiver</a></h4><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51412622" target="_blank" rel="external">Service</a></h4><h4 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51413224" target="_blank" rel="external">ContentProvider</a></h4><h4 id="Github-Android-开源库前100名简介"><a href="#Github-Android-开源库前100名简介" class="headerlink" title="Github Android 开源库前100名简介"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51422799" target="_blank" rel="external">Github Android 开源库前100名简介</a></h4><h4 id="网络编程-1"><a href="#网络编程-1" class="headerlink" title="网络编程"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51503218" target="_blank" rel="external">网络编程</a></h4><h4 id="网络编程2——Retrofit"><a href="#网络编程2——Retrofit" class="headerlink" title="网络编程2——Retrofit"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51786186" target="_blank" rel="external">网络编程2——Retrofit</a></h4><h4 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a><a href="http://blog.csdn.net/baidu_29029173/article/details/51913179" target="_blank" rel="external">自定义控件</a></h4><blockquote>
<p>工作后也就没再继续更新，毕竟比较基础，没有更多总结性的内容。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在csdn上写过一些基础，用于复习整理。在这里新开博客就开个链接。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.xyz/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Android" scheme="https://xblydxj.xyz/tags/Android/"/>
    
  </entry>
  
</feed>
