<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xblydxj</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xblydxj.github.io/"/>
  <updated>2017-06-01T08:40:05.000Z</updated>
  <id>https://xblydxj.github.io/</id>
  
  <author>
    <name>Xblydxj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沉迷国漫，无法自拔</title>
    <link href="https://xblydxj.github.io/2017/05/31/%E6%B2%89%E8%BF%B7%E5%9B%BD%E6%BC%AB%EF%BC%8C%E6%97%A0%E6%B3%95%E8%87%AA%E6%8B%94/"/>
    <id>https://xblydxj.github.io/2017/05/31/沉迷国漫，无法自拔/</id>
    <published>2017-05-31T01:55:22.000Z</published>
    <updated>2017-06-01T08:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>从上个礼拜开始，原本动漫、漫画基本不看的我被多人安利，上了b站看了<a href="http://bangumi.bilibili.com/anime/2543/" target="_blank" rel="external">《狐妖小红娘》</a>。然鹅，就此一发不可收拾<del>大口狗粮</del>。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="470" height="86" src="//music.163.com/outchain/player?type=2&id=405253631&auto=1&height=66"></iframe>

<p>这首歌是在看这番之前听的，当时没有收藏，也并没仔细听，可能不算特别好听。但在看过番之后，每一次听都能起鸡皮疙瘩。</p>
<ul>
<li><p><strong>持有一半的梦尚未回还</strong></p>
<p>  述及故事背景，人与妖相恋却不能长久，而两人能够在相思树下许愿，在人的来世能够在狐妖们帮助下回忆起前世，也就是故事的概括：<strong>转世续缘</strong>，而这一句歌词即为妖寻找自己转世恋人的期盼。</p>
</li>
<li><strong>愿今生将你的心头填满</strong></li>
<li><strong>一条殊途，绝不回转</strong></li>
<li><strong>一同经历过的万千时光</strong></li>
<li><p><strong>不及你与他初见的模样</strong></p>
<p>  前一世未能为爱人做的，这一世有了更多的期待与憧憬，对这样一个目标的实现没有什么可以动摇。前进的途中想的都是过去一起的时光，以及最初见到的样子。</p>
</li>
<li><strong>天月将白，赴往涂山</strong></li>
<li><strong>为你闯出的前方</strong></li>
<li><strong>贯穿世界的消亡</strong></li>
<li><p><strong>将弱小的自己藏匿抹杀</strong></p>
<p>  苦情巨树位于涂山，共赴涂山许下转世续缘，原本弱小的自己也拼命强大，转世寻找的过程，经历的千百年，无法动摇这样的期待，即使再艰难也不会停止。</p>
</li>
<li><strong>可所有你说的话</strong></li>
<li><p><strong>全部都被遗忘</strong></p>
<p>  转世后的人，遗忘了前一世，这也是续缘的最大的困难。</p>
</li>
<li><strong><em>轮转</em></strong></li>
<li><strong>你的手穿透我 这整个胸膛</strong></li>
<li><strong>记忆与爱填满</strong></li>
<li><p><strong>这整个心脏</strong></p>
<p>  故事有好几个章节，而贯穿全程的月红篇中，有一幕就是东方月初为了涂山红红和自己的将来，满脸笑容的将红红的手穿过自己的胸，为了染上自己的血以对抗敌人。<del>也就是封面</del></p>
</li>
<li><strong>前生所有未能说过的话</strong></li>
<li><strong>在你心中无法撼动的他</strong></li>
<li><strong>所有为你而行的空幻梦想</strong></li>
<li><strong>都不及最后与你许的愿望</strong></li>
<li><p><strong>来相思树下</strong></p>
<p>  故事背景下，人与妖的恋情因为寿命的差距而致使妖的孤独，涂山上的苦情巨树也正是为解决这样的问题而存在的，为其开启转世续缘，但这样也只是缘分，能够相遇，却不能让人回忆起前世，这需要妖的努力和涂山小红仙的帮助，许下这样一个愿望，为此付诸一切，只为了这样一个“空幻的梦想”。</p>
</li>
</ul>
<blockquote>
<p>在这期间，b站里看到了很多弹幕，即是在看其他视频也常常能看见<strong>来相思树下</strong>这句话。国漫对于徜徉已久的日漫从技术角度来讲难以超越，甚至相差甚远，但从这一部中我看到了国漫拥有的优势，故事的细腻情感描写，以及熟知于国人的各种ip，类似转世这样的情节，大概也只有中国有这样正统的来源吧。<br>在动漫中，台词什么的各种出戏，或是无厘头了一些，不过可能更能中和情感，毕竟面向大众不是只想看这样纯言情的。</p>
</blockquote>
<p>除了这首歌，故事中印象深刻的台词也有许多，而最近被刷屏最频繁的就是这句：</p>
<p><strong>如果我们能活着出去的话，大漠，草原，万水千山，你愿意陪我一起看吗？</strong></p>
<p><img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-2.png" alt="王权富贵篇"></p>
<hr>
<p>除了故事，小红娘里好几首歌都很好听，《梦回环》<del>就是上面那首</del>即是王权富贵篇的主题曲。还有<br>《若当来世》：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="470" height="86" src="//music.163.com/outchain/player?type=2&id=462686465&auto=0&height=66"></iframe>

<p>依旧是与故事相应的歌词，听着很有感觉。</p>
<p>网易云音乐里《狐妖小红仙》的合集：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="470" height="450" src="//music.163.com/outchain/player?type=1&id=35233089&auto=0&height=430"></iframe>

<h3 id="记"><a href="#记" class="headerlink" title="记"></a>记</h3><p>   因为《狐妖小红娘》补了好多个番，许多人都有一种国漫崛起的想法，但对于这些作品依旧是褒贬不一的，有人说要给国漫更多的宽容，但另一部分人认为就是因为有了更多宽容才抑制了国漫的发展。辩证的看法总结是：宽容并批判，我看了，有些可能看这标题就是无感，也点进去看了，看了之后得出更多的想法，对他做一些评价，国漫的发展，需要批评修正，以及宽容带来的促进。<br>   <a href="http://bangumi.bilibili.com/anime/2543/" target="_blank" rel="external">《狐妖小红娘》</a>和<a href="http://bangumi.bilibili.com/anime/5852?from=search&amp;seid=12052103350506266059" target="_blank" rel="external">《全职高手》</a>以及秦时明月系列（包括<a href="http://list.youku.com/show/id_ze4c5befee10111e5b432.html?spm=a2h0j.8191423.subscription_wrap.DD~A" target="_blank" rel="external">天行九歌</a>和<a href="http://list.youku.com/show/id_z9a8e9ba0605611e2a19e.html?spm=a2h0j.8191423.subscription_wrap.DD~A" target="_blank" rel="external">秦时明月</a>）暂且算是现在最受欢迎的国漫。秦时明月算是比较早的，走的路线是3d，而前两者是动漫，作比较的也就少一些。全职高手方面更多的是吃ip，以小说<a href="http://book.qidian.com/info/1887208" target="_blank" rel="external">《全职高手》</a>动画化，而在这部动漫出来之前，b站已经有了很多宣传。不过从我自己角度来看这部动漫，情节方面没有什么出彩的地方，不过画工以及技术角度相对较强，人物大多靠看过小说的人自己脑补。总之，我其实是不理解他这么受欢迎的原因的。<br>   秦时明月则非常出彩，从夜尽天明到现在的君临天下，可以看得出他的进步，只是出的确实比较慢，一集去头去尾去前情提要去下集预告，正片大概5到10分钟，一般不超过十分钟，我看的时候想等着养肥再看，等着等着就忘记了，然后下一次再看的时候发现，也还是就养了这几集。天行九歌，作为秦时明月的一部扩展番外，制作精良，画面以及技术的体现是3D国漫的一个代表。<br>   3d的国漫不得不提的还有画江湖的系列，人物的外形塑造与秦时明月风格迥异，两部都是那种一眼就能看出出自谁家的作品。画江湖系列，更新时间比秦时明月频繁，情节方面也是可圈可点。<br>   到这里要提到另一点，一部略微成熟的作品需要的不是一个主角，主角只是中心，成熟的作品会更多的塑造其他的人物性格，从而描写主旨，以事为题，不以人为题。这一点上，秦时明月做的非常完美。略微成熟，不过还是另一个说法，动漫的受众年龄大多数可能为15到25之间，对于这方面可能要求不多。<br>   除此之外，现在正在更新连载的一些我个人认为还不错的国漫：《降灵记》《快把我哥带走》《武庚纪》等等。<br>   总之，批判与宽容共存，是之后对国漫的态度，期待他的发展。</p>
<hr>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul>
<li><p>《全职高手》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-5.jpeg" alt="全职高手"></p>
</li>
<li><p>《秦时明月》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-3.jpeg" alt="秦时明月"></p>
</li>
<li><p>《天行九歌》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-4.png" alt="天行九歌"></p>
</li>
<li><p>《画江湖之不良人》</p>
<p>  <img src="http://oni7r1rj8.bkt.clouddn.com/%E7%8B%90%E5%A6%96-6.jpeg" alt="画江湖"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;从上个礼拜开始，原本动漫、漫画基本不看的我被多人安利，上了b站看了&lt;a href=&quot;http://bangumi.bilibili.com/anime/2543/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《狐妖小红
    
    </summary>
    
      <category term="live" scheme="https://xblydxj.github.io/categories/live/"/>
    
    
      <category term="live" scheme="https://xblydxj.github.io/tags/live/"/>
    
      <category term="日常" scheme="https://xblydxj.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="话题" scheme="https://xblydxj.github.io/tags/%E8%AF%9D%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【video】Endless road</title>
    <link href="https://xblydxj.github.io/2017/05/24/%5Bvideo%5DEndless%20road/"/>
    <id>https://xblydxj.github.io/2017/05/24/[video]Endless road/</id>
    <published>2017-05-23T20:48:00.000Z</published>
    <updated>2017-05-25T08:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【video】Endless-road"><a href="#【video】Endless-road" class="headerlink" title="【video】Endless road"></a>【video】Endless road</h1><a id="more"></a>
<iframe height="400" width="100%" src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=8d35ec51b4d942e9072950f6d25cde2a&tvId=238982400&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="1"></iframe>

<p>随意的浏览网易云，看见这样一个短视频。嗯，有触动。<del>我眼睛进沙子了。</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【video】Endless-road&quot;&gt;&lt;a href=&quot;#【video】Endless-road&quot; class=&quot;headerlink&quot; title=&quot;【video】Endless road&quot;&gt;&lt;/a&gt;【video】Endless road&lt;/h1&gt;
    
    </summary>
    
      <category term="生活" scheme="https://xblydxj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Live" scheme="https://xblydxj.github.io/tags/Live/"/>
    
      <category term="Video" scheme="https://xblydxj.github.io/tags/Video/"/>
    
  </entry>
  
  <entry>
    <title>博客修改记录</title>
    <link href="https://xblydxj.github.io/2017/05/18/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
    <id>https://xblydxj.github.io/2017/05/18/博客修改记录/</id>
    <published>2017-05-18T07:17:08.000Z</published>
    <updated>2017-05-26T02:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录博客搭建，修改的过程以及相关方法。</p>
<a id="more"></a>
<h3 id="博客修改记录"><a href="#博客修改记录" class="headerlink" title="博客修改记录"></a>博客修改记录</h3><ul>
<li><p>4-19<br>  建站~，使用<a href="https://material.viosey.com/" target="_blank" rel="external"> Material </a>的theme。</p>
</li>
<li><p>5-16<br>  由于代码高亮等以及许多功能的缺失，所以改用<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>但是next不好看，所以想要改改。</p>
</li>
<li><p>5-17<br>  发现一个<a href="http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html" target="_blank" rel="external">厉害的妹子博主</a>，有我正需要的material效果。</p>
</li>
<li><p>5-18<br>  从昨天的教程里换上了card效果，以及nest背景。</p>
</li>
<li><p>5-21<br>  开始修改文章列表样式，卡片图上嵌，下方文章介绍。以及一些小图标等小改动。</p>
</li>
<li><p>5-23<br>  初版完成。</p>
</li>
<li><p>5-24<br>  markdown插入视频</p>
</li>
</ul>
<h3 id="涉及模块"><a href="#涉及模块" class="headerlink" title="涉及模块"></a>涉及模块</h3><ol>
<li><p>图标<br> 原本想要改全部的icon，不过后面看了一下上方菜单的那些改的有点麻烦就放弃了~。不过文章列表部分的icon还是可以改一改的。<br> 这是原来的样子：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-1.png" alt="博客修改记录-1"><br> 这是改完的样子：<img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-2.png" alt="博客修改记录-2"><br> 关于icon的文件位置：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-3.png" alt="博客修改记录-3"><br> 这是icon的代码位置：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-4.png" alt="博客修改记录-4"><br> 首先，在<a href="http://iconfont.cn/" target="_blank" rel="external">阿里图标库</a>里找到需要的换的icon：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-5.png" alt="博客修改记录-5"><br> 点击进入，将需要的图标收入购物车，并添加至项目：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-6.png" alt="博客修改记录-6"><br> 然后将上方的代码复制到custom.styl文件内：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-7.png" alt="博客修改记录-7"><br> 并在post.swig对应的css文件内写上对应的css：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-8.png" alt="博客修改记录-8"><br> css：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-9.png" alt="博客修改记录-9"><br> 最后在post.swig中应用：<br> <img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-10.png" alt="博客修改记录-10"><br> post-meta下的即是文章列表里那些图标的位置，每个对应的查找一下原来的fontawesome的外形之后进行替换即可。</p>
</li>
<li><p>图片<br>next，muse的theme是极简风格，不过个人喜欢card，以及想要配上与文章对应的图，让页面内容更加丰富美观一些。<br>效果：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-12.png" alt="博客修改记录-12"><br>添加了头部的图片，以及为了有层次效果也添加了阴影效果。也将标题放入图片中。<br>首先：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-11.png" alt="博客修改记录-11"><br>依旧是这个post.swig文件内，其中有一个头部：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-13.png" alt="博客修改记录-13"><br>post-meta上的部分使用一个div包裹<del>上方div中的内容被我折叠了</del>，div定义了一个背景图片，背景图片的来源引用自文章中的picture属性，在自己的markdown文章中的定义方式：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-14.png" alt="博客修改记录-14"><br>也贴出他的css，目录依旧是：<code>next/source/css/_common/components/post/post.styl</code>：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-15.png" alt="博客修改记录-15"></p>
</li>
<li><p>插入视频<br>markdown本身无法插入视频，不过毕竟是在网页上加载，直接写html也是可以的：<br><img src="http://oni7r1rj8.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-16.png" alt="博客修改记录-16"><br>复制这段代码到md文件中就可以直接加载了。<del>就是这么简单</del></p>
</li>
</ol>
<h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h3><ol>
<li>彩色图片插入问题，svg图片植入</li>
<li>背景优化。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录博客搭建，修改的过程以及相关方法。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Blog" scheme="https://xblydxj.github.io/tags/Blog/"/>
    
      <category term="干货" scheme="https://xblydxj.github.io/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结（2）</title>
    <link href="https://xblydxj.github.io/2017/05/12/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(2)/"/>
    <id>https://xblydxj.github.io/2017/05/12/Python基础总结(2)/</id>
    <published>2017-05-12T03:36:58.000Z</published>
    <updated>2017-05-17T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇~</p>
<a id="more"></a>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>高级函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line"><span class="keyword">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>, <span class="number">-5</span>, abs);</div><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
<p> 可以将函数abs当做变量传入add函数参与运算。</p>
<ul>
<li><p>map:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</div></pre></td></tr></table></figure>
<p>作为键值对，以后者的Iterator作为底数进行前者的迭代运算并输出。</p>
</li>
<li><p>reduce:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure>
<p>抽取后者的Iterator的前两个元素进行前者的运算并迭代输出。</p>
</li>
<li><p>filter:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</div><div class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>]))</div><div class="line"><span class="comment"># 结果: ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>
<p>第二个判断为s为空则返回s.strip()<del>(去除空格)</del>，s不为空返回s。  </p>
</li>
<li><p>sorted:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. 正常排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</div><div class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</div><div class="line"></div><div class="line"><span class="comment"># 2. 依照绝对值排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</div><div class="line"></div><div class="line"><span class="comment"># 3. 忽略大小写并反向排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>返回函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            ax = ax + n</div><div class="line">        <span class="keyword">return</span> ax</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f()</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<p> 当调用lazy_sum时sum函数并不会立即运行，此时的f即是sum函数，调用f()时才开始运行内部，以此实现延时运行的效果。</p>
</li>
<li><p>闭包</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line"><span class="keyword">return</span> fs</div></pre></td></tr></table></figure>
<p> 第一种方式在调用时返回值都为9，因为内部i在第一次被调用之后被作为返回值返回，所以函数并未被清理，i的值依旧为上一次运行结果。而第二种在返回函数的内部单独传入一个临时变量，这个临时变量的作用域止于f函数，并在每一次运行时都重新传入新的j，所以运行结果为1，4，9.闭包原则。</p>
</li>
<li><p>匿名函数<br> python的匿名函数即为lambda表达式:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>装饰器</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def log(text):</div><div class="line">    def decorator(func)</div><div class="line">        def wrapper(*args, **kw):</div><div class="line">            print('%s %s():' % (text, func.__name__))</div><div class="line">            return func(*args, **kw)</div><div class="line">        return wrapper</div><div class="line">    return decorator</div><div class="line"></div><div class="line">@log('execute')</div><div class="line">def now():</div><div class="line">    print('2015-3-25')   </div><div class="line"></div><div class="line">&gt;&gt;&gt; now()</div><div class="line">execute now():</div><div class="line">2015-3-25</div></pre></td></tr></table></figure>
<p> 定义log函数，对now函数进行标记。运行时也同时运行log方法。相当于运行了<br> <code>now = log(&#39;execute&#39;)(now)</code></p>
<p> 最后写法:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. 带参数</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2. 不带参数</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
</li>
<li><p>偏函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">max2 = functools.partial(max, <span class="number">10</span>)</div><div class="line"></div><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p> 偏函数的作用：固定一些参数，简化需要传入的参数数量。<br> 此时<code>int2(&#39;10010&#39;)</code>相当于</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kw = &#123; <span class="string">'base'</span>: <span class="number">2</span> &#125;</div><div class="line">int(<span class="string">'10010'</span>, **kw)</div></pre></td></tr></table></figure>
<p> 以及<code>max2(5,6,7)</code>相当于</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">max(*args)</div><div class="line"><span class="comment">#结果为10</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol>
<li><p>使用:<br> 栗：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># 1. 文档注释，所有模块代码的第一个字符串都被视为文档注释</span></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line"><span class="comment"># 2. 标记作者（廖雪峰）</span></div><div class="line">__author__ = <span class="string">'Michael Liao'</span></div><div class="line"></div><div class="line"><span class="comment"># 3. 导入内建的sys模块，sys模块有一个argv变量，用list存储了命令行的所有参数，其第一个参数永远是模块的文件名</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print(<span class="string">'Hello, world!'</span>)</div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Too many arguments!'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 4. 标记作用域</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div><div class="line"></div><div class="line"><span class="comment"># 5. 结果</span></div><div class="line">$ python hello.py Michael</div><div class="line">Hello, Michael!</div></pre></td></tr></table></figure>
</li>
<li><p>第三方模块</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成图片的缩略图</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">im = Image.open(<span class="string">'test.png'</span>)</div><div class="line">print(im.format, im.size, im.mode)</div><div class="line">im.thumbnail((<span class="number">200</span>,<span class="number">100</span>))</div><div class="line">im.save(<span class="string">'thumb.jpg'</span>, <span class="string">'JPEG'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote>
<p>Object Oriented Programing(OOP)面向对象编程</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div></pre></td></tr></table></figure>
<p>类比于java，<code>__init__</code>函数相当于构造函数，<code>self</code>代表自身，必须传的参数。当定义了<code>__init__</code>方法之后，创建其实例时需要将对应的参数也传入。</p>
<ol>
<li><p>成员变量私有化</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></div><div class="line">    self.__name = name</div><div class="line">    self.__score = score</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>待续~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇~&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结（1）</title>
    <link href="https://xblydxj.github.io/2017/04/24/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(1)/"/>
    <id>https://xblydxj.github.io/2017/04/24/Python基础总结(1)/</id>
    <published>2017-04-24T09:48:03.000Z</published>
    <updated>2017-05-17T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>想写个爬虫，开始看看python。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>mac系统下如果安装homebrew只需要<code>brew install python3</code>，这里直接安装的是python3。</li>
<li>也可以直接在<a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="external">官网</a>下载安装。</li>
<li><p>解释器</p>
<blockquote>
<p>python运行需要解释器，类似java的编译器，python有各类支持的解释器。</p>
</blockquote>
<ul>
<li>CPython：由C语言开发的解释器，安装python3时也已直接获得，是使用最广泛的解释器。</li>
<li>IPython：比CPython多了一些交互。</li>
<li>PyPy：运用了JIT，能够动态编译，且运行结果与CPython可能有所不同。</li>
<li>Jython：使用java语言开发的解释器，能够将其编译成java字节码执行。</li>
<li>。。。</li>
<li>还是用CPython吧</li>
</ul>
</li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol>
<li>整数，浮点数，字符串，布尔值，空值，变量，常量。</li>
<li>空值表示方式为None。</li>
<li>str使用unicode每个字符占用多个字节，当在网络传输时需要转为bytes型的字符串，以<code>b&#39;字符串&#39;</code>这样形式存在即为bytes类型。</li>
<li>相关方法：<ul>
<li><code>ord(&#39;A&#39;)</code>:此段输出结果为A的ascll码即65.</li>
<li><code>chr(&#39;65&#39;)</code>:输出结果为A</li>
<li><code>&#39;ABC&#39;.encode(&#39;ascii&#39;)</code>：输出结果为b’ABC’</li>
<li><code>b&#39;ABC&#39;.decode(&#39;ascii&#39;)</code>：输出结果为’ABC’</li>
<li><code>len(&#39;中文&#39;.encode(&#39;utf-8&#39;))</code> 对等于 <code>len(b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;)</code></li>
</ul>
</li>
<li>格式化<ul>
<li>输出与c语言类似，整数%d,浮点数%f,字符串s%，十六进制数为%x，通常可以直接使用s%都能够将数值转为字符串。</li>
</ul>
</li>
</ol>
<h3 id="集合数组"><a href="#集合数组" class="headerlink" title="集合数组"></a>集合数组</h3><ol>
<li>list: <code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code><ul>
<li><code>len(classmates)</code>：用于获取list长度</li>
<li><code>classmates[0]</code>：根据索引直接访问元素</li>
<li><code>classmates[-1]</code>：索引添加负号即从尾部开始进行索引。索引-1即为最后一个元素。</li>
<li><code>classmates.append(&#39;Adam&#39;)</code>：添加元素</li>
<li><code>classmates.insert(1,&#39;Jack&#39;)</code>：插入元素</li>
<li><code>classmates.pop()</code>：弹出最后一个元素</li>
<li><code>classmates.pop(1)</code>：弹出指定索引元素</li>
</ul>
</li>
<li>tuple：<code>classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code>: tuple类似数组，无法被修改，list类似集合。不能使用append，pop等方法。</li>
<li>dict：<code>d = {&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85}</code><ul>
<li><code>&#39;Thomas&#39; in d</code>：判断是否在字典中，输出结果为false</li>
<li><code>d.get(&#39;Thomas&#39;, -1)</code>：获取key值</li>
<li><code>d.pop(&#39;Bob&#39;)</code>：弹出指定key</li>
<li>相较于list，dict查找速度快，但内存占用大</li>
</ul>
</li>
<li>set：<code>s = set([1, 1, 2, 2, 3, 3])</code><ul>
<li>set的value值不可见，是key不可重复的dict，</li>
</ul>
</li>
</ol>
<h3 id="判断与循环"><a href="#判断与循环" class="headerlink" title="判断与循环"></a>判断与循环</h3><ol>
<li><p>if语句：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</div><div class="line">    &lt;执行<span class="number">1</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</div><div class="line">    &lt;执行<span class="number">2</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</div><div class="line">    &lt;执行<span class="number">3</span>&gt;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;执行<span class="number">4</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>for循环：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">print(name)</div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</div><div class="line">   sum = sum + x</div><div class="line">print(sum)</div></pre></td></tr></table></figure>
</li>
<li><p>while循环：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line">n = <span class="number">99</span></div><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">   sum = sum + n</div><div class="line">   n = n - <span class="number">2</span></div><div class="line">print(sum)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>数据类型转换</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
</li>
<li><p>定义函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
</li>
<li><p>空函数：占位符pass</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据类型以及异常</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
</li>
<li><p>返回多个值：其实际返回了一个tuple</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数：调用时power(5),与power(5,2）结果相同</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
</li>
<li><p>可变参数：传入个数随意</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
</li>
<li><p>关键字参数：额外的参数传入</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>命名关键字：只会接受 <em> 之后的参数，而可变参数后跟随的参数不需要添加 </em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div></pre></td></tr></table></figure>
</li>
<li><p>参数组合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div></pre></td></tr></table></figure>
</li>
<li><p>递归</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><ol>
<li><p>切片：截取list,包左不包右，左为0时可以省略，也可以使用-索引从后至前进行索引截取</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</div><div class="line">[<span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'Bob'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line">//从第一位开始，共<span class="number">10</span>位，间隔为<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</div><div class="line">从<span class="number">0</span>开始到最后，间隔为<span class="number">5</span></div></pre></td></tr></table></figure>
</li>
<li><p>迭代</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line">//查看key</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line">//查看value</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value <span class="keyword">in</span> d.values()</div><div class="line">//查看item</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()</div><div class="line">//判断对象是否是可迭代对象</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div><div class="line">//使用emulate函数将list变为索引-元素对</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div></pre></td></tr></table></figure>
</li>
<li><p>列表生成式</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//x*x为元素式，<span class="keyword">for</span>循环生成参数，</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div><div class="line">//<span class="keyword">for</span>循环嵌套</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>生成器generator</p>
<ul>
<li><p>斐波那契数列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        print(b)</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
</li>
<li><p>yield函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">print(<span class="string">'step 1'</span>)</div><div class="line"><span class="keyword">yield</span> <span class="number">1</span></div><div class="line">print(<span class="string">'step 2'</span>)</div><div class="line"><span class="keyword">yield</span>(<span class="number">3</span>)</div><div class="line">print(<span class="string">'step 3'</span>)</div><div class="line"><span class="keyword">yield</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
</li>
<li><p>使用for循环遍历第二个fib函数时，在运行至yield b时即中断，运行至for循环下一次，这样得不到fib函数的返回值。而使用next函数时遇yield即终止，并记录，下一次再使用next时才能得下一个结果。</p>
</li>
</ul>
</li>
<li><p>迭代器</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterable)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter([]), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p> 判断前者是否为可迭代的。list,tuple,dict,set,str,for循环,以及generator和yield搭配的function成为可迭代的。<br> 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。Iterator能够存储一个无限大的数据流，有自身固定长度的数据流无法作为迭代器。<br> 把list、dict、str等Iterable变成Iterator可以使用iter()函数。</p>
</li>
</ol>
<hr>
<p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想写个爬虫，开始看看python。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>过去文章链接</title>
    <link href="https://xblydxj.github.io/2017/04/17/%E8%BF%87%E5%8E%BB%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
    <id>https://xblydxj.github.io/2017/04/17/过去文章链接/</id>
    <published>2017-04-17T02:36:03.000Z</published>
    <updated>2017-05-24T10:18:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前在csdn上写过一些基础，用于复习整理。在这里新开博客就开个链接。</p>
<a id="more"></a>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ol>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50527624" target="_blank" rel="external">Java综述</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50527705" target="_blank" rel="external">Java基础部分</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50531198" target="_blank" rel="external">程序流程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50532893" target="_blank" rel="external">函数</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50533084" target="_blank" rel="external">数组</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50533227" target="_blank" rel="external">面向对象</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50533348" target="_blank" rel="external">单例</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50535421" target="_blank" rel="external">继承</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50535578" target="_blank" rel="external">抽象类与接口</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50536125" target="_blank" rel="external">异常</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50536416" target="_blank" rel="external">多线程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50537316" target="_blank" rel="external">String</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50538901" target="_blank" rel="external">集合</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50539499" target="_blank" rel="external">泛型</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50540979" target="_blank" rel="external">IO流</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50563471" target="_blank" rel="external">网络编程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50563702" target="_blank" rel="external">反射</a></li>
</ol>
<blockquote>
<p>以及一些小总结</p>
</blockquote>
<ol>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51175799" target="_blank" rel="external">for(;;) 与 while(true) 的 区别</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51176080" target="_blank" rel="external">为什么在写了equals方法之后还要写hashcode方法</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51183043" target="_blank" rel="external">六种单例设计模式，嗯，强行六种</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51184358" target="_blank" rel="external">Java中获取当前目录的方法</a></li>
</ol>
<h3 id="Android基础和一些相关知识"><a href="#Android基础和一些相关知识" class="headerlink" title="Android基础和一些相关知识"></a>Android基础和一些相关知识</h3><ol>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51236460" target="_blank" rel="external">MySQL与JDBC</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51237030" target="_blank" rel="external">tomcat与http协议，servlet整合</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51368047" target="_blank" rel="external">系统架构&amp;SDK目录</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51379666" target="_blank" rel="external">Android Studio</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51385228" target="_blank" rel="external">布局&amp;Logcat</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51388663" target="_blank" rel="external">Activity</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51400537" target="_blank" rel="external">BroadcastReceiver</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51412622" target="_blank" rel="external">Service</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51413224" target="_blank" rel="external">ContentProvider</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51422799" target="_blank" rel="external">Github Android 开源库前100名简介</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51503218" target="_blank" rel="external">网络编程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51786186" target="_blank" rel="external">网络编程2——Retrofit</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51913179" target="_blank" rel="external">自定义控件</a></li>
</ol>
<blockquote>
<p>工作后也就没再继续更新，毕竟比较基础，没有更多总结性的内容。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在csdn上写过一些基础，用于复习整理。在这里新开博客就开个链接。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Android" scheme="https://xblydxj.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
