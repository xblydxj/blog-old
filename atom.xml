<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xblydxj&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xblydxj.github.io/"/>
  <updated>2017-05-17T10:09:22.000Z</updated>
  <id>https://xblydxj.github.io/</id>
  
  <author>
    <name>Xblydxj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础总结（2）</title>
    <link href="https://xblydxj.github.io/2017/05/12/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(2)/"/>
    <id>https://xblydxj.github.io/2017/05/12/Python基础总结(2)/</id>
    <published>2017-05-12T03:36:58.000Z</published>
    <updated>2017-05-17T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇~</p>
<a id="more"></a>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="1-高级函数"><a href="#1-高级函数" class="headerlink" title="1. 高级函数"></a>1. 高级函数</h5><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def add(x, y, f):</div><div class="line">return f(x) + f(y)</div><div class="line"></div><div class="line">&gt;&gt;&gt; add(2, -5, abs);</div><div class="line">7</div></pre></td></tr></table></figure>

可以将函数abs当做变量传入add函数参与运算。
</code></pre><p><em>1. map:</em></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def f(x):</div><div class="line">...     return x * x</div><div class="line">...</div><div class="line">&gt;&gt;&gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</div><div class="line">&gt;&gt;&gt; list(r)</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</div><div class="line"></div><div class="line">&gt;&gt;&gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))</div><div class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;]</div></pre></td></tr></table></figure>
<p>  作为键值对，以后者的Iterator作为底数进行前者的迭代运算并输出。<br><em>2. reduce:</em></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from functools import reduce</div><div class="line">&gt;&gt;&gt; def fn(x, y):</div><div class="line">...     return x * 10 + y</div><div class="line">...</div><div class="line">&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])</div><div class="line">13579</div></pre></td></tr></table></figure>
<p>  抽取后者的Iterator的前两个元素进行前者的运算并迭代输出。<br><em>3. filter:</em></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def is_odd(n):</div><div class="line">    return n % 2 == 1</div><div class="line">list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</div><div class="line"># 结果: [1, 5, 9, 15]</div><div class="line"></div><div class="line">def not_empty(s):</div><div class="line">    return s and s.strip()</div><div class="line">list(filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos;  &apos;]))</div><div class="line"># 结果: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div></pre></td></tr></table></figure>
<p>  第二个判断为s为空则返回s.strip()<del>(去除空格)</del>，s不为空返回s。<br><em>4. sorted:</em></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 1. 正常排序</div><div class="line">&gt;&gt;&gt; sorted([36, 5, -12, 9, -21])</div><div class="line">[-21, -12, 5, 9, 36]</div><div class="line"></div><div class="line"># 2. 依照绝对值排序</div><div class="line">&gt;&gt;&gt; sorted([36, 5, -12, 9, -21], key=abs)</div><div class="line">[5, 9, -12, -21, 36]</div><div class="line"></div><div class="line"># 3. 忽略大小写并反向排序</div><div class="line">&gt;&gt;&gt; sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower, reverse=True)</div><div class="line">[&apos;Zoo&apos;, &apos;Credit&apos;, &apos;bob&apos;, &apos;about&apos;]</div></pre></td></tr></table></figure>
<h5 id="2-返回函数"><a href="#2-返回函数" class="headerlink" title="2. 返回函数"></a>2. 返回函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def lazy_sum(*args):</div><div class="line">    def sum():</div><div class="line">        ax = 0</div><div class="line">        for n in args:</div><div class="line">            ax = ax + n</div><div class="line">        return ax</div><div class="line">    return sum</div><div class="line"></div><div class="line">&gt;&gt;&gt; f = lazy_sum(1, 3, 5, 7, 9)</div><div class="line">&gt;&gt;&gt; f</div><div class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at 0x101c6ed90&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; f()</div><div class="line">25</div></pre></td></tr></table></figure>
<p>当调用lazy_sum时sum函数并不会立即运行，此时的f即是sum函数，调用f()时才开始运行内部，以此实现延时运行的效果。</p>
<h5 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">def count():</div><div class="line">    fs = []</div><div class="line">    for i in range(1, 4):</div><div class="line">        def f():</div><div class="line">             return i*i</div><div class="line">        fs.append(f)</div><div class="line">    return fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line">def count():</div><div class="line">    def f(j):</div><div class="line">        def g():</div><div class="line">            return j*j</div><div class="line">        return g</div><div class="line">    fs = []</div><div class="line">    for i in range(1, 4):</div><div class="line">        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()</div><div class="line">return fs</div></pre></td></tr></table></figure>
<p>第一种方式在调用时返回值都为9，因为内部i在第一次被调用之后被作为返回值返回，所以函数并未被清理，i的值依旧为上一次运行结果。而第二种在返回函数的内部单独传入一个临时变量，这个临时变量的作用域止于f函数，并在每一次运行时都重新传入新的j，所以运行结果为1，4，9.闭包原则。</p>
<h5 id="4-匿名函数"><a href="#4-匿名函数" class="headerlink" title="4. 匿名函数"></a>4. 匿名函数</h5><p>python的匿名函数即为lambda表达式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</div></pre></td></tr></table></figure>
<h5 id="5-装饰器"><a href="#5-装饰器" class="headerlink" title="5. 装饰器"></a>5. 装饰器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def log(text):</div><div class="line">    def decorator(func)</div><div class="line">        def wrapper(*args, **kw):</div><div class="line">            print(&apos;%s %s():&apos; % (text, func.__name__))</div><div class="line">            return func(*args, **kw)</div><div class="line">        return wrapper</div><div class="line">    return decorator</div><div class="line"></div><div class="line">@log(&apos;execute&apos;)</div><div class="line">def now():</div><div class="line">    print(&apos;2015-3-25&apos;)   </div><div class="line"></div><div class="line">&gt;&gt;&gt; now()</div><div class="line">execute now():</div><div class="line">2015-3-25</div></pre></td></tr></table></figure>
<p>定义log函数，对now函数进行标记。运行时也同时运行log方法。相当于运行了<br><code>now = log(&#39;execute&#39;)(now)</code></p>
<p>最后写法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#1. 带参数</div><div class="line">import functools</div><div class="line"></div><div class="line">def log(text):</div><div class="line">    def decorator(func):</div><div class="line">        @functools.wraps(func)</div><div class="line">        def wrapper(*args, **kw):</div><div class="line">            print(&apos;%s %s():&apos; % (text, func.__name__))</div><div class="line">            return func(*args, **kw)</div><div class="line">        return wrapper</div><div class="line">    return decorator</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#2. 不带参数</div><div class="line">import functools</div><div class="line"></div><div class="line">def log(func):</div><div class="line">    @functools.wraps(func)</div><div class="line">    def wrapper(*args, **kw):</div><div class="line">        print(&apos;call %s():&apos; % func.__name__)</div><div class="line">        return func(*args, **kw)</div><div class="line">    return wrapper</div></pre></td></tr></table></figure>
<h5 id="6-偏函数"><a href="#6-偏函数" class="headerlink" title="6. 偏函数"></a>6. 偏函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">max2 = functools.partial(max, 10)</div><div class="line"></div><div class="line">int2 = functools.partial(int, base=2)</div></pre></td></tr></table></figure>
<p>偏函数的作用：固定一些参数，简化需要传入的参数数量。<br>此时<code>int2(&#39;10010&#39;)</code>相当于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kw = &#123; &apos;base&apos;: 2 &#125;</div><div class="line">int(&apos;10010&apos;, **kw)</div></pre></td></tr></table></figure>
<p>以及<code>max2(5,6,7)</code>相当于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">args = (10, 5, 6, 7)</div><div class="line">max(*args)</div><div class="line">#结果为10</div></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h5 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用:"></a>1. 使用:</h5><p>栗：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># 1. 文档注释，所有模块代码的第一个字符串都被视为文档注释</div><div class="line">&apos; a test module &apos;</div><div class="line"></div><div class="line"># 2. 标记作者（廖雪峰）</div><div class="line">__author__ = &apos;Michael Liao&apos;</div><div class="line"></div><div class="line"># 3. 导入内建的sys模块，sys模块有一个argv变量，用list存储了命令行的所有参数，其第一个参数永远是模块的文件名</div><div class="line">import sys</div><div class="line"></div><div class="line">def test():</div><div class="line">    args = sys.argv</div><div class="line">    if len(args)==1:</div><div class="line">        print(&apos;Hello, world!&apos;)</div><div class="line">    elif len(args)==2:</div><div class="line">        print(&apos;Hello, %s!&apos; % args[1])</div><div class="line">    else:</div><div class="line">        print(&apos;Too many arguments!&apos;)</div><div class="line"></div><div class="line"># 4. 标记作用域</div><div class="line">if __name__==&apos;__main__&apos;:</div><div class="line">    test()</div><div class="line"></div><div class="line"># 5. 结果</div><div class="line">$ python hello.py Michael</div><div class="line">Hello, Michael!</div></pre></td></tr></table></figure>
<h5 id="2-第三方模块"><a href="#2-第三方模块" class="headerlink" title="2. 第三方模块"></a>2. 第三方模块</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 生成图片的缩略图</div><div class="line">from PIL import Image</div><div class="line">im = Image.open(&apos;test.png&apos;)</div><div class="line">print(im.format, im.size, im.mode)</div><div class="line">im.thumbnail((200,100))</div><div class="line">im.save(&apos;thumb.jpg&apos;, &apos;JPEG&apos;)</div></pre></td></tr></table></figure>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote>
<p>Object Oriented Programing(OOP)面向对象编程</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Student(object):</div><div class="line">    def __init__(self, name, score):</div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    def print_score(self):</div><div class="line">        print(&apos;%s: %s&apos; % (self.name, self.score))</div></pre></td></tr></table></figure>
<p>类比于java，<code>__init__</code>函数相当于构造函数，<code>self</code>代表自身，必须传的参数。当定义了<code>__init__</code>方法之后，创建其实例时需要将对应的参数也传入。</p>
<h5 id="1-成员变量私有化"><a href="#1-成员变量私有化" class="headerlink" title="1. 成员变量私有化"></a>1. 成员变量私有化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def __init__(self,name,score):</div><div class="line">    self.__name = name</div><div class="line">    self.__score = score</div></pre></td></tr></table></figure>
<hr>
<p>待续~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇~&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础总结（1）</title>
    <link href="https://xblydxj.github.io/2017/04/24/Python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93(1)/"/>
    <id>https://xblydxj.github.io/2017/04/24/Python基础总结(1)/</id>
    <published>2017-04-24T09:48:03.000Z</published>
    <updated>2017-05-17T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>想写个爬虫，开始看看python。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>mac系统下如果安装homebrew只需要<code>brew install python3</code>，这里直接安装的是python3。</li>
<li>也可以直接在<a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="external">官网</a>下载安装。</li>
<li><p>解释器</p>
<blockquote>
<p>python运行需要解释器，类似java的编译器，python有各类支持的解释器。</p>
<ul>
<li>CPython：由C语言开发的解释器，安装python3时也已直接获得，是使用最广泛的解释器。</li>
<li>IPython：比CPython多了一些交互。</li>
<li>PyPy：运用了JIT，能够动态编译，且运行结果与CPython可能有所不同。</li>
<li>Jython：使用java语言开发的解释器，能够将其编译成java字节码执行。</li>
<li>。。。</li>
<li>还是用CPython吧</li>
</ul>
</blockquote>
</li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol>
<li>整数，浮点数，字符串，布尔值，空值，变量，常量。</li>
<li>空值表示方式为None。</li>
<li>str使用unicode每个字符占用多个字节，当在网络传输时需要转为bytes型的字符串，以<code>b&#39;字符串&#39;</code>这样形式存在即为bytes类型。</li>
<li>相关方法：<ul>
<li><code>ord(&#39;A&#39;)</code>:此段输出结果为A的ascll码即65.</li>
<li><code>chr(&#39;65&#39;)</code>:输出结果为A</li>
<li><code>&#39;ABC&#39;.encode(&#39;ascii&#39;)</code>：输出结果为b’ABC’</li>
<li><code>b&#39;ABC&#39;.decode(&#39;ascii&#39;)</code>：输出结果为’ABC’</li>
<li><code>len(&#39;中文&#39;.encode(&#39;utf-8&#39;))</code> 对等于 <code>len(b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;)</code></li>
</ul>
</li>
<li>格式化<ul>
<li>输出与c语言类似，整数%d,浮点数%f,字符串s%，十六进制数为%x，通常可以直接使用s%都能够将数值转为字符串。</li>
</ul>
</li>
</ol>
<h3 id="集合数组"><a href="#集合数组" class="headerlink" title="集合数组"></a>集合数组</h3><ol>
<li>list: <code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code><ul>
<li><code>len(classmates)</code>：用于获取list长度</li>
<li><code>classmates[0]</code>：根据索引直接访问元素</li>
<li><code>classmates[-1]</code>：索引添加负号即从尾部开始进行索引。索引-1即为最后一个元素。</li>
<li><code>classmates.append(&#39;Adam&#39;)</code>：添加元素</li>
<li><code>classmates.insert(1,&#39;Jack&#39;)</code>：插入元素</li>
<li><code>classmates.pop()</code>：弹出最后一个元素</li>
<li><code>classmates.pop(1)</code>：弹出指定索引元素</li>
</ul>
</li>
<li>tuple：<code>classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code>: tuple类似数组，无法被修改，list类似集合。不能使用append，pop等方法。</li>
<li>dict：<code>d = {&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85}</code><ul>
<li><code>&#39;Thomas&#39; in d</code>：判断是否在字典中，输出结果为false</li>
<li><code>d.get(&#39;Thomas&#39;, -1)</code>：获取key值</li>
<li><code>d.pop(&#39;Bob&#39;)</code>：弹出指定key</li>
<li>相较于list，dict查找速度快，但内存占用大</li>
</ul>
</li>
<li>set：<code>s = set([1, 1, 2, 2, 3, 3])</code><ul>
<li>set的value值不可见，是key不可重复的dict，</li>
</ul>
</li>
</ol>
<h3 id="判断与循环"><a href="#判断与循环" class="headerlink" title="判断与循环"></a>判断与循环</h3><ol>
<li><p>if语句：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</div><div class="line">    &lt;执行<span class="number">1</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</div><div class="line">    &lt;执行<span class="number">2</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</div><div class="line">    &lt;执行<span class="number">3</span>&gt;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;执行<span class="number">4</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>for循环：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">print(name)</div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</div><div class="line">   sum = sum + x</div><div class="line">print(sum)</div></pre></td></tr></table></figure>
</li>
<li><p>while循环：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line">n = <span class="number">99</span></div><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">   sum = sum + n</div><div class="line">   n = n - <span class="number">2</span></div><div class="line">print(sum)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>数据类型转换</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
</li>
<li><p>定义函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
</li>
<li><p>空函数：占位符pass</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据类型以及异常</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
</li>
<li><p>返回多个值：其实际返回了一个tuple</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数：调用时power(5),与power(5,2）结果相同</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
</li>
<li><p>可变参数：传入个数随意</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
</li>
<li><p>关键字参数：额外的参数传入</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>命名关键字：只会接受 <em> 之后的参数，而可变参数后跟随的参数不需要添加 </em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div></pre></td></tr></table></figure>
</li>
<li><p>参数组合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div></pre></td></tr></table></figure>
</li>
<li><p>递归</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><ol>
<li><p>切片：截取list,包左不包右，左为0时可以省略，也可以使用-索引从后至前进行索引截取</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</div><div class="line">[<span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'Bob'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line">//从第一位开始，共<span class="number">10</span>位，间隔为<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</div><div class="line">从<span class="number">0</span>开始到最后，间隔为<span class="number">5</span></div></pre></td></tr></table></figure>
</li>
<li><p>迭代</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</div><div class="line">//查看key</div><div class="line">&gt;&gt;&gt; for key in d:</div><div class="line">//查看value</div><div class="line">&gt;&gt;&gt; for value in d.values()</div><div class="line">//查看item</div><div class="line">&gt;&gt;&gt; for k, v in d.items()</div><div class="line">//判断对象是否是可迭代对象</div><div class="line">&gt;&gt;&gt; from collections import Iterable</div><div class="line">&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable) # str是否可迭代</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</div><div class="line">False</div><div class="line">//使用emulate函数将list变为索引-元素对</div><div class="line">&gt;&gt;&gt; for i, value in enumerate([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]):</div><div class="line">...     print(i, value)</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="3-列表生成式"><a href="#3-列表生成式" class="headerlink" title="3. 列表生成式"></a>3. 列表生成式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//x*x为元素式，for循环生成参数，</div><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</div><div class="line">[4, 16, 36, 64, 100]</div><div class="line">//for循环嵌套</div><div class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</div><div class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</div></pre></td></tr></table></figure>
<h5 id="4-生成器generator"><a href="#4-生成器generator" class="headerlink" title="4. 生成器generator"></a>4. 生成器generator</h5><ul>
<li>斐波那契数列：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def fib(max):</div><div class="line">    n, a, b = 0, 0, 1</div><div class="line">    while n &lt; max:</div><div class="line">        print(b)</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + 1</div><div class="line">    return &apos;done&apos;</div><div class="line"></div><div class="line"></div><div class="line">def fib(max):</div><div class="line">    n, a, b = 0, 0, 1</div><div class="line">    while n &lt; max:</div><div class="line">        yield b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + 1</div><div class="line">    return &apos;done&apos;</div></pre></td></tr></table></figure>
<ul>
<li>yield函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">def odd():</div><div class="line">print(&apos;step 1&apos;)</div><div class="line">yield 1</div><div class="line">print(&apos;step 2&apos;)</div><div class="line">yield(3)</div><div class="line">print(&apos;step 3&apos;)</div><div class="line">yield(5)</div><div class="line"></div><div class="line">&gt;&gt;&gt; o = odd()</div><div class="line">&gt;&gt;&gt; next(o)</div><div class="line">step 1</div><div class="line">1</div><div class="line">&gt;&gt;&gt; next(o)</div><div class="line">step 2</div><div class="line">3</div><div class="line">&gt;&gt;&gt; next(o)</div><div class="line">step 3</div><div class="line">5</div><div class="line">&gt;&gt;&gt; next(o)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
<ul>
<li>使用for循环遍历第二个fib函数时，在运行至yield b时即中断，运行至for循环下一次，这样得不到fib函数的返回值。而使用next函数时遇yield即终止，并记录，下一次再使用next时才能得下一个结果。</li>
</ul>
<h5 id="5-迭代器"><a href="#5-迭代器" class="headerlink" title="5. 迭代器"></a>5. 迭代器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from collections import Iterable</div><div class="line">&gt;&gt;&gt; isinstance([], Iterable)</div><div class="line">True</div><div class="line"></div><div class="line">&gt;&gt;&gt; from collections import Iterator</div><div class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance([], Iterator)</div><div class="line">False</div><div class="line">&gt;&gt;&gt; isinstance(iter([]), Iterator)</div><div class="line">True</div></pre></td></tr></table></figure>
<p>判断前者是否为可迭代的。list,tuple,dict,set,str,for循环,以及generator和yield搭配的function成为可迭代的。<br>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。Iterator能够存储一个无限大的数据流，有自身固定长度的数据流无法作为迭代器。<br>把list、dict、str等Iterable变成Iterator可以使用iter()函数。</p>
<hr>
<p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想写个爬虫，开始看看python。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Python" scheme="https://xblydxj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>过去文章链接</title>
    <link href="https://xblydxj.github.io/2017/04/17/%E8%BF%87%E5%8E%BB%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
    <id>https://xblydxj.github.io/2017/04/17/过去文章链接/</id>
    <published>2017-04-17T02:36:03.000Z</published>
    <updated>2017-05-17T06:31:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前在csdn上写过一些基础，用于复习整理。在这里新开博客就开个链接。</p>
<a id="more"></a>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ol>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50527624" target="_blank" rel="external">Java综述</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50527705" target="_blank" rel="external">Java基础部分</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50531198" target="_blank" rel="external">程序流程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50532893" target="_blank" rel="external">函数</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50533084" target="_blank" rel="external">数组</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50533227" target="_blank" rel="external">面向对象</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50533348" target="_blank" rel="external">单例</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50535421" target="_blank" rel="external">继承</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50535578" target="_blank" rel="external">抽象类与接口</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50536125" target="_blank" rel="external">异常</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50536416" target="_blank" rel="external">多线程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50537316" target="_blank" rel="external">String</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50538901" target="_blank" rel="external">集合</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50539499" target="_blank" rel="external">泛型</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50540979" target="_blank" rel="external">IO流</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50563471" target="_blank" rel="external">网络编程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/50563702" target="_blank" rel="external">反射</a></li>
</ol>
<blockquote>
<p>以及一些小总结</p>
</blockquote>
<ol>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51175799" target="_blank" rel="external">for(;;) 与 while(true) 的 区别</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51176080" target="_blank" rel="external">为什么在写了equals方法之后还要写hashcode方法</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51183043" target="_blank" rel="external">六种单例设计模式，嗯，强行六种</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51184358" target="_blank" rel="external">Java中获取当前目录的方法</a></li>
</ol>
<h3 id="Android基础和一些相关知识"><a href="#Android基础和一些相关知识" class="headerlink" title="Android基础和一些相关知识"></a>Android基础和一些相关知识</h3><ol>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51236460" target="_blank" rel="external">MySQL与JDBC</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51237030" target="_blank" rel="external">tomcat与http协议，servlet整合</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51368047" target="_blank" rel="external">系统架构&amp;SDK目录</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51379666" target="_blank" rel="external">Android Studio</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51385228" target="_blank" rel="external">布局&amp;Logcat</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51388663" target="_blank" rel="external">Activity</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51400537" target="_blank" rel="external">BroadcastReceiver</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51412622" target="_blank" rel="external">Service</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51413224" target="_blank" rel="external">ContentProvider</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51422799" target="_blank" rel="external">Github Android 开源库前100名简介</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51503218" target="_blank" rel="external">网络编程</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51786186" target="_blank" rel="external">网络编程2——Retrofit</a></li>
<li><a href="http://blog.csdn.net/baidu_29029173/article/details/51913179" target="_blank" rel="external">自定义控件</a></li>
</ol>
<blockquote>
<p>工作后也就没再继续更新，毕竟比较基础，没有更多总结性的内容。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在csdn上写过一些基础，用于复习整理。在这里新开博客就开个链接。&lt;/p&gt;
    
    </summary>
    
      <category term="正经" scheme="https://xblydxj.github.io/categories/%E6%AD%A3%E7%BB%8F/"/>
    
    
      <category term="Android" scheme="https://xblydxj.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
